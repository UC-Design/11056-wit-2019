{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unit content for 11056, Front-end Web Design. WIT, 2019. Please make sure you refer to Canvas for further information. Introduction Please watch the first lecture, which provides an introduction to the unit. Make sure you understand what is required of you, the unit structure and assessment items. If you have any questions, use the discussion forums or email Ben. Text from the video is available here or under the Introduction link to the left. Lecture recording available on Canvas. Modules Module 1: Designing for the Web Module 2: HTML5 Module 3: CSS Module 4: Responsive CSS Software you will need A code editor. Anything you like. I'll use Brackets in class. Free for both PC and Mac GitHub Desktop . Free for both Mac and PC. You need to create a GitHub account first. Resources Canvas Canvas login: http://uclearn.canberra.edu.au Links Slides created with RevealJS This site generated by GitHub pages","title":"Home"},{"location":"#introduction","text":"Please watch the first lecture, which provides an introduction to the unit. Make sure you understand what is required of you, the unit structure and assessment items. If you have any questions, use the discussion forums or email Ben. Text from the video is available here or under the Introduction link to the left. Lecture recording available on Canvas.","title":"Introduction"},{"location":"#modules","text":"Module 1: Designing for the Web Module 2: HTML5 Module 3: CSS Module 4: Responsive CSS","title":"Modules"},{"location":"#software-you-will-need","text":"A code editor. Anything you like. I'll use Brackets in class. Free for both PC and Mac GitHub Desktop . Free for both Mac and PC. You need to create a GitHub account first.","title":"Software you will need"},{"location":"#resources","text":"","title":"Resources"},{"location":"#canvas","text":"Canvas login: http://uclearn.canberra.edu.au","title":"Canvas"},{"location":"#links","text":"Slides created with RevealJS This site generated by GitHub pages","title":"Links"},{"location":"introduction/","text":"Welcome This lecture Introduction to the unit Assessment items Important things you need to know Teaching Staff Me! Dr Ben Ennis Butler : unit convenor and tutor Email: ben.ennis.butler@canberra.edu.au . Office 7C39. Learning Outcomes By the end of this unit, we want you to be able to: Identify and critique a range of front-end web design concepts, skills and theories; Experiment with the creation of web-based interactive interfaces using appropriate concepts and techniques; and Review and evaluate appropriate development methodologies in the creation of interactive works. How we do it You will learn how to write code (html and css) Writing code is hard and time consuming - you need to stay on top of the work We hit the ground running! We\u2019ll cover a lot of content, especially in the first few weeks. Module approach There are 4 modules: Designing for the Web HTML CSS Responsive CSS Assessment items 3 assessment items Project 1: Website Design. Due Tuesday week 2 by 9am. Worth 25%. Project 2: Responsive Website. Due Friday week 7. Worth 55%. Quiz. Due by Friday week 7. Worth 20%. Project 1: Website Design Content from Module 1 Look for design references Develop some basic low-fi sketches Inspiration board Project 2: Responsive Website Content from all modules Build upon the work you've done in Module 1 CSS and HTML Build, test, refine Quiz Content from all modules No time limit Multiple choice, true/false etc Easy if you follow along Your responsibilities You need to check the unit outline and assessment information on Canvas to ensure you are following the brief and understand what is required of you\u2026 Extra Important! You must only submit your own code. That means: - HTML5: do not use the <table> </table> tag to layout content - No templates, libraries, pre-generated code, content management systems - No Bootstrap, Wix, SquareSpace etc - Pure CSS, no SASS Plagiarism Don\u2019t copy other people\u2019s code! There is a difference between learning from and copying other people\u2019s work That means don\u2019t just refer to W3Schools (or an online resource) and take their examples You need to demonstrate your understanding with comments in the code If you are unsure, then ask us Materials and Equipment Canvas and GitHub All the unit content will be available on our GitHub page Link is all over Canvas. Software You'll need a code editor We'll use GitHub Info on Canvas/GitHub Unit structure Lectures All lecture content available online You should watch these at your own pace and work through the activities Workshops Not recorded We will work on parts of the assessment items in the workshops Front-end Web What is it? Core languages HTML: Hyper Text Markup Language CSS: Cascading Style Sheets The End. Questions?","title":"Welcome"},{"location":"introduction/#welcome","text":"","title":"Welcome"},{"location":"introduction/#this-lecture","text":"Introduction to the unit Assessment items Important things you need to know","title":"This lecture"},{"location":"introduction/#teaching-staff","text":"Me! Dr Ben Ennis Butler : unit convenor and tutor Email: ben.ennis.butler@canberra.edu.au . Office 7C39.","title":"Teaching Staff"},{"location":"introduction/#learning-outcomes","text":"By the end of this unit, we want you to be able to: Identify and critique a range of front-end web design concepts, skills and theories; Experiment with the creation of web-based interactive interfaces using appropriate concepts and techniques; and Review and evaluate appropriate development methodologies in the creation of interactive works.","title":"Learning Outcomes"},{"location":"introduction/#how-we-do-it","text":"You will learn how to write code (html and css) Writing code is hard and time consuming - you need to stay on top of the work We hit the ground running! We\u2019ll cover a lot of content, especially in the first few weeks.","title":"How we do it"},{"location":"introduction/#module-approach","text":"There are 4 modules: Designing for the Web HTML CSS Responsive CSS","title":"Module approach"},{"location":"introduction/#assessment-items","text":"3 assessment items Project 1: Website Design. Due Tuesday week 2 by 9am. Worth 25%. Project 2: Responsive Website. Due Friday week 7. Worth 55%. Quiz. Due by Friday week 7. Worth 20%.","title":"Assessment items"},{"location":"introduction/#project-1-website-design","text":"Content from Module 1 Look for design references Develop some basic low-fi sketches Inspiration board","title":"Project 1: Website Design"},{"location":"introduction/#project-2-responsive-website","text":"Content from all modules Build upon the work you've done in Module 1 CSS and HTML Build, test, refine","title":"Project 2: Responsive Website"},{"location":"introduction/#quiz","text":"Content from all modules No time limit Multiple choice, true/false etc Easy if you follow along","title":"Quiz"},{"location":"introduction/#your-responsibilities","text":"You need to check the unit outline and assessment information on Canvas to ensure you are following the brief and understand what is required of you\u2026","title":"Your responsibilities"},{"location":"introduction/#extra-important","text":"You must only submit your own code. That means: - HTML5: do not use the <table> </table> tag to layout content - No templates, libraries, pre-generated code, content management systems - No Bootstrap, Wix, SquareSpace etc - Pure CSS, no SASS","title":"Extra Important!"},{"location":"introduction/#plagiarism","text":"Don\u2019t copy other people\u2019s code! There is a difference between learning from and copying other people\u2019s work That means don\u2019t just refer to W3Schools (or an online resource) and take their examples You need to demonstrate your understanding with comments in the code If you are unsure, then ask us","title":"Plagiarism"},{"location":"introduction/#materials-and-equipment","text":"Canvas and GitHub All the unit content will be available on our GitHub page Link is all over Canvas. Software You'll need a code editor We'll use GitHub Info on Canvas/GitHub","title":"Materials and Equipment"},{"location":"introduction/#unit-structure","text":"Lectures All lecture content available online You should watch these at your own pace and work through the activities Workshops Not recorded We will work on parts of the assessment items in the workshops","title":"Unit structure"},{"location":"introduction/#front-end-web","text":"What is it? Core languages HTML: Hyper Text Markup Language CSS: Cascading Style Sheets","title":"Front-end Web"},{"location":"introduction/#the-end","text":"Questions?","title":"The End."},{"location":"introduction/brief/","text":"Brief Background information This website is being developed to increase public awareness about the significance of Robin Boyd\u2019s Churchill House (formerly Open-Systems House), in Canberra. In 2019, the Robin Boyd Foundation is celebrating the 100th anniversary of the influential architects birth. More info about the centenary: Robin Boyd Foundation website . Website title Churchill House Potential other titles will be considered upon request . Logo No logo provided for Website title. Please use text or appropriate imagery. Target audience All genders. From ages 20+ People interested in architecture, local history, design. Please ensure you consider the target audience and content in the design of your site. Required content We\u2019ve provided 5 text files containing the required content for the site: description history introduction robin boyd statement of significance Don\u2019t feel that you need to make a page for each file! Instead, please think about how you could use the content in the most effective way. For example, some files could be combined into a single page, others might be split across multiple pages - the choice is yours. That said, we will be looking to ensure that you use as much of the content as possible. Footer The footer needs to contain the following text: This website was produced by students in the Faculty of Arts & Design, University of Canberra, 2019. Images In the source content folder you will find an assets folder containing a number of images. You can use these as you need. Source content Available here: https://github.com/UC-Design/11056-wit-2019/assessment/churchill-house","title":"Brief"},{"location":"introduction/brief/#brief","text":"","title":"Brief"},{"location":"introduction/brief/#background-information","text":"This website is being developed to increase public awareness about the significance of Robin Boyd\u2019s Churchill House (formerly Open-Systems House), in Canberra. In 2019, the Robin Boyd Foundation is celebrating the 100th anniversary of the influential architects birth. More info about the centenary: Robin Boyd Foundation website .","title":"Background information"},{"location":"introduction/brief/#website-title","text":"Churchill House Potential other titles will be considered upon request .","title":"Website title"},{"location":"introduction/brief/#logo","text":"No logo provided for Website title. Please use text or appropriate imagery.","title":"Logo"},{"location":"introduction/brief/#target-audience","text":"All genders. From ages 20+ People interested in architecture, local history, design. Please ensure you consider the target audience and content in the design of your site.","title":"Target audience"},{"location":"introduction/brief/#required-content","text":"We\u2019ve provided 5 text files containing the required content for the site: description history introduction robin boyd statement of significance Don\u2019t feel that you need to make a page for each file! Instead, please think about how you could use the content in the most effective way. For example, some files could be combined into a single page, others might be split across multiple pages - the choice is yours. That said, we will be looking to ensure that you use as much of the content as possible.","title":"Required content"},{"location":"introduction/brief/#footer","text":"The footer needs to contain the following text: This website was produced by students in the Faculty of Arts & Design, University of Canberra, 2019.","title":"Footer"},{"location":"introduction/brief/#images","text":"In the source content folder you will find an assets folder containing a number of images. You can use these as you need.","title":"Images"},{"location":"introduction/brief/#source-content","text":"Available here: https://github.com/UC-Design/11056-wit-2019/assessment/churchill-house","title":"Source content"},{"location":"introduction/slides/","text":"Introduction Slides Intro lecture Slides","title":"Introduction Slides"},{"location":"introduction/slides/#introduction-slides","text":"","title":"Introduction Slides"},{"location":"introduction/slides/#intro-lecture","text":"Slides","title":"Intro lecture"},{"location":"module-1/","text":"Module 1: Designing for the Web This module will introduce you to the basics of designing for the Web. In Winter semester, you'll cover this content in 1 week and submit project 1 by Tuesday of week 2. This Module You will learn how to: look for inspiration online understand web conventions think about how to structure a website Module Content Web Design Attributes Website Structure Sketching and prototyping Inspiration board Slides The information on the pages above is also available as slides (generally used for presentation in class) here . Additional Resources","title":"Module 1: Designing for the Web"},{"location":"module-1/#module-1-designing-for-the-web","text":"This module will introduce you to the basics of designing for the Web. In Winter semester, you'll cover this content in 1 week and submit project 1 by Tuesday of week 2.","title":"Module 1: Designing for the Web"},{"location":"module-1/#this-module","text":"You will learn how to: look for inspiration online understand web conventions think about how to structure a website","title":"This Module"},{"location":"module-1/#module-content","text":"Web Design Attributes Website Structure Sketching and prototyping Inspiration board","title":"Module Content"},{"location":"module-1/#slides","text":"The information on the pages above is also available as slides (generally used for presentation in class) here .","title":"Slides"},{"location":"module-1/#additional-resources","text":"","title":"Additional Resources"},{"location":"module-1/design-1/","text":"Web Design Attributes The first module will introduce you to key web design attributes and conventions. These will become more apparent as you start looking at, and thinking critically about, a wide range of different websites. One of the main aims of this module is to make you aware of the wide range of different styles that are used to define a website. Where to start? As a new student, or even a student with existing knowledge of the field, it is super important to first understand the area in which you are working. By that I mean you should be familar with current Web design trends, conventions and common attributes. Web Design research Use these links to start your research process: Site Inspire Httpster Awwards Tip There are heaps more, just try Googling 'web design inspiration' What to look for... It is important to be able to critically assess and interpret digital works. As you start looking at different websites, you should think about the elements on them and ask yourself 'what do they consist of?' For example: Where is the header of the website? Does the website even have a header? What elements are within the header? Does it contain a logo and navigation items? Does it contain social media buttons? Does it stick to the top of the browser window as you scroll down? What colours does it use? and so on... Understanding Web Conventions As you start to look around at a wide range of website, you'll notice that they all share similar attributes. When the same attribute exists across a number of sites it could be considered as a design convention: Info It is a convention to place the logo in the top left corner of the website. When you hover over the logo you expect to be able to click on it to return to the home page. Common attributes Width How wide is the website? Most sites are responsive, have a fixed width, or are fluid. You can be responsive and still have a fixed width. We'll talk more about responsive design in module 4 . Alignment How is the bulk of the page aligned? Generally, it would be: Centered Left aligned Fluid (full width, no real alignment) Rare to see a right aligned site Header Includes Logo Navigation Social media icons (sometimes) Search Hero content Trend: to be fixed to top of screen on scroll - known as a sticky header Logo Either an image or text Try select it\u2026 if you can select the individual letters then it is text Good to change the logo on hover - provides the user with visual feedback, suggests they can click on it Often links home Search Generally only on larger sites with lots of content Relies on a database or external system to work Navigation Three key types: Primary What is most important Secondary Sub pages Tertiary Third level, perhaps links in the footer Hero Content Used to bring focus to something (e.g. a product for sale, or a blog post) Or to rotate through some images or video, bringing the website to life. Sidebar Does it exist? They are going out of fashion\u2026 Why? Because of responsive design Footer Repeat the primary navigation Social media icons Copyright / Terms of Service / Credits Key colours Most websites stick to a colour scheme Lots of tools to help with choosing a colour scheme: HTML Colour Codes Colour Lovers Adobe Color Key typefaces How are they used together? Headings in sans-serif, content in serif or vice versa See Font Pair for some good examples Special features Look for One-page website Sticky header/footer Fancy animation Quirky features?","title":"Web Design Attributes"},{"location":"module-1/design-1/#web-design-attributes","text":"The first module will introduce you to key web design attributes and conventions. These will become more apparent as you start looking at, and thinking critically about, a wide range of different websites. One of the main aims of this module is to make you aware of the wide range of different styles that are used to define a website.","title":"Web Design Attributes"},{"location":"module-1/design-1/#where-to-start","text":"As a new student, or even a student with existing knowledge of the field, it is super important to first understand the area in which you are working. By that I mean you should be familar with current Web design trends, conventions and common attributes.","title":"Where to start?"},{"location":"module-1/design-1/#web-design-research","text":"Use these links to start your research process: Site Inspire Httpster Awwards Tip There are heaps more, just try Googling 'web design inspiration'","title":"Web Design research"},{"location":"module-1/design-1/#what-to-look-for","text":"It is important to be able to critically assess and interpret digital works. As you start looking at different websites, you should think about the elements on them and ask yourself 'what do they consist of?' For example: Where is the header of the website? Does the website even have a header? What elements are within the header? Does it contain a logo and navigation items? Does it contain social media buttons? Does it stick to the top of the browser window as you scroll down? What colours does it use? and so on...","title":"What to look for..."},{"location":"module-1/design-1/#understanding-web-conventions","text":"As you start to look around at a wide range of website, you'll notice that they all share similar attributes. When the same attribute exists across a number of sites it could be considered as a design convention: Info It is a convention to place the logo in the top left corner of the website. When you hover over the logo you expect to be able to click on it to return to the home page.","title":"Understanding Web Conventions"},{"location":"module-1/design-1/#common-attributes","text":"","title":"Common attributes"},{"location":"module-1/design-1/#width","text":"How wide is the website? Most sites are responsive, have a fixed width, or are fluid. You can be responsive and still have a fixed width. We'll talk more about responsive design in module 4 .","title":"Width"},{"location":"module-1/design-1/#alignment","text":"How is the bulk of the page aligned? Generally, it would be: Centered Left aligned Fluid (full width, no real alignment) Rare to see a right aligned site","title":"Alignment"},{"location":"module-1/design-1/#header","text":"Includes Logo Navigation Social media icons (sometimes) Search Hero content Trend: to be fixed to top of screen on scroll - known as a sticky header","title":"Header"},{"location":"module-1/design-1/#logo","text":"Either an image or text Try select it\u2026 if you can select the individual letters then it is text Good to change the logo on hover - provides the user with visual feedback, suggests they can click on it Often links home","title":"Logo"},{"location":"module-1/design-1/#search","text":"Generally only on larger sites with lots of content Relies on a database or external system to work","title":"Search"},{"location":"module-1/design-1/#navigation","text":"Three key types: Primary What is most important Secondary Sub pages Tertiary Third level, perhaps links in the footer","title":"Navigation"},{"location":"module-1/design-1/#hero-content","text":"Used to bring focus to something (e.g. a product for sale, or a blog post) Or to rotate through some images or video, bringing the website to life.","title":"Hero Content"},{"location":"module-1/design-1/#sidebar","text":"Does it exist? They are going out of fashion\u2026 Why? Because of responsive design","title":"Sidebar"},{"location":"module-1/design-1/#footer","text":"Repeat the primary navigation Social media icons Copyright / Terms of Service / Credits","title":"Footer"},{"location":"module-1/design-1/#key-colours","text":"Most websites stick to a colour scheme Lots of tools to help with choosing a colour scheme: HTML Colour Codes Colour Lovers Adobe Color","title":"Key colours"},{"location":"module-1/design-1/#key-typefaces","text":"How are they used together? Headings in sans-serif, content in serif or vice versa See Font Pair for some good examples","title":"Key typefaces"},{"location":"module-1/design-1/#special-features","text":"Look for One-page website Sticky header/footer Fancy animation Quirky features?","title":"Special features"},{"location":"module-1/design-2/","text":"Website structure As you'll start to realise, most websites are the same - even if they look different - they'll all share the same features. When you come to start designing a website, you need to carefully think about the structure. Look at the resources you have and ask yourself the follwing questions: What content do you have? Who is the target audience? Will it be image-heavy? What kind of pages will you need? Are there any required navigation items? As you consider these questions, you should be able to start to form an idea of what the site should look like and how it will function. The structure will emerge from here. Key things to think about when you start designing your site: Content Navigation Basic layout Content Are we talking lots of text or lots of images? You need to know what the content is before you can really think about the structure of the website. The content will define the style of the site you are building and allow you to think about the navigation and the layout. Navigation As you start looking at different websites you should keep an eye on the navigation. How many items do they have? How do they structure the navigation? Perhaps the most difficult part about navigation on the Web is organizing and designing it. ( Smashing Magazine ) There are 3 types of navigation: Primary Primary navigation is the content that users are most interested in. The main pages of the website. Secondary As you can imagine, this is the content that is of secondary interest. This could sub-pages (i.e. what you might see in a drop down menu). Tertiary The third level. This might include things like social media links, terms and conditions, privacy statements etc. Steve Krug wrote a very famous book called Don't make me think , make sure you read the key takeaways available here . Read the rest of the Smashing Magazine article quoted above for a full run down about website navigation. Layout I really encourage you to start on paper.","title":"Website structure"},{"location":"module-1/design-2/#website-structure","text":"As you'll start to realise, most websites are the same - even if they look different - they'll all share the same features. When you come to start designing a website, you need to carefully think about the structure. Look at the resources you have and ask yourself the follwing questions: What content do you have? Who is the target audience? Will it be image-heavy? What kind of pages will you need? Are there any required navigation items? As you consider these questions, you should be able to start to form an idea of what the site should look like and how it will function. The structure will emerge from here. Key things to think about when you start designing your site: Content Navigation Basic layout","title":"Website structure"},{"location":"module-1/design-2/#content","text":"Are we talking lots of text or lots of images? You need to know what the content is before you can really think about the structure of the website. The content will define the style of the site you are building and allow you to think about the navigation and the layout.","title":"Content"},{"location":"module-1/design-2/#navigation","text":"As you start looking at different websites you should keep an eye on the navigation. How many items do they have? How do they structure the navigation? Perhaps the most difficult part about navigation on the Web is organizing and designing it. ( Smashing Magazine ) There are 3 types of navigation: Primary Primary navigation is the content that users are most interested in. The main pages of the website. Secondary As you can imagine, this is the content that is of secondary interest. This could sub-pages (i.e. what you might see in a drop down menu). Tertiary The third level. This might include things like social media links, terms and conditions, privacy statements etc. Steve Krug wrote a very famous book called Don't make me think , make sure you read the key takeaways available here . Read the rest of the Smashing Magazine article quoted above for a full run down about website navigation.","title":"Navigation"},{"location":"module-1/design-2/#layout","text":"I really encourage you to start on paper.","title":"Layout"},{"location":"module-1/design-3/","text":"The Design (aka sketching and prototyping) Where should you start? Use visual designs (pen/paper, Photoshop or similar) for quick layout exploration and asset creation It\u2019s impossible to accurately assess a web layout in .JPG form a single Photoshop composition will only express a sliver of the layout potential a fully-flexible responsive site has... Warning Don't waste your time in Photoshop. I'm a strong believer of using the sketching in code methodology. This approach encourages rapid prototyping, directly with code. Read: David Verba's Sketching in Code: the Magic of Prototyping article from 2008 or Jared M. Spool's reflection here . Mockups/sketches & wireframes What a .PSD file can\u2019t easily show in terms of layout, you can communicate on a scrap of paper using a pencil Wireframes can be as simple or as complex as you need them to be. Some ideas: You might create an inspiration board with basic design attributes you can use to influence your design, or you might use photoshop to establish the \u201clook & feel\u201d of a digital design; you might use wireframes to map out the basic layout and functionality Info For the first project, you need to: create Wireframes for 2 different page types: homepage and content page. These should be low-fidelity, use little content and be limited in colour. Tools As you can imagine, there are a heap of tools you can use. It doesn't raelly matter what you use, as long as you can export your work! Here's a few which are good: Moqups . Has a great free account you can use. Proto.io Adobe XD If you have access to the Adobe CC, then you might want to use this Vectr","title":"The Design"},{"location":"module-1/design-3/#the-design","text":"(aka sketching and prototyping)","title":"The Design"},{"location":"module-1/design-3/#where-should-you-start","text":"Use visual designs (pen/paper, Photoshop or similar) for quick layout exploration and asset creation It\u2019s impossible to accurately assess a web layout in .JPG form a single Photoshop composition will only express a sliver of the layout potential a fully-flexible responsive site has... Warning Don't waste your time in Photoshop. I'm a strong believer of using the sketching in code methodology. This approach encourages rapid prototyping, directly with code. Read: David Verba's Sketching in Code: the Magic of Prototyping article from 2008 or Jared M. Spool's reflection here .","title":"Where should you start?"},{"location":"module-1/design-3/#mockupssketches-wireframes","text":"What a .PSD file can\u2019t easily show in terms of layout, you can communicate on a scrap of paper using a pencil Wireframes can be as simple or as complex as you need them to be.","title":"Mockups/sketches &amp; wireframes"},{"location":"module-1/design-3/#some-ideas","text":"You might create an inspiration board with basic design attributes you can use to influence your design, or you might use photoshop to establish the \u201clook & feel\u201d of a digital design; you might use wireframes to map out the basic layout and functionality Info For the first project, you need to: create Wireframes for 2 different page types: homepage and content page. These should be low-fidelity, use little content and be limited in colour.","title":"Some ideas:"},{"location":"module-1/design-3/#tools","text":"As you can imagine, there are a heap of tools you can use. It doesn't raelly matter what you use, as long as you can export your work! Here's a few which are good: Moqups . Has a great free account you can use. Proto.io Adobe XD If you have access to the Adobe CC, then you might want to use this Vectr","title":"Tools"},{"location":"module-1/design-4/","text":"Inspiration board","title":"Inspiration board"},{"location":"module-1/design-4/#inspiration-board","text":"","title":"Inspiration board"},{"location":"module-1/slides/","text":"Web Design Slides Web Design Attributes","title":"Web Design Slides"},{"location":"module-1/slides/#web-design-slides","text":"","title":"Web Design Slides"},{"location":"module-2/","text":"Module 2: HTML5 Workshops are not recorded. This module This module will introduce you to the joys of HTML. You will learn how to: structure a HTML5 document understand the components of semantic HTML write semantic HTML Module Content HTML Introduction to the Web GitHub Setting up your site Coding Software Coding Introduction Writing a basic page with semantic HTML Navigation Validation Slides The information on the pages above is also available as slides (generally used for presentation in class) here . Additional Resources One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Module 2: HTML5"},{"location":"module-2/#module-2-html5","text":"Workshops are not recorded.","title":"Module 2: HTML5"},{"location":"module-2/#this-module","text":"This module will introduce you to the joys of HTML. You will learn how to: structure a HTML5 document understand the components of semantic HTML write semantic HTML","title":"This module"},{"location":"module-2/#module-content","text":"","title":"Module Content"},{"location":"module-2/#html","text":"Introduction to the Web GitHub Setting up your site Coding Software Coding Introduction Writing a basic page with semantic HTML Navigation Validation","title":"HTML"},{"location":"module-2/#slides","text":"The information on the pages above is also available as slides (generally used for presentation in class) here .","title":"Slides"},{"location":"module-2/#additional-resources","text":"One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Additional Resources"},{"location":"module-2/html-1/","text":"Introduction to the Web Introduction An introduction to the Web How the Web works Domains and hosting Production process Key terms (HTML and CSS) The internet and the Web Used interchangeably but not the same thing The Web is a protocol on the internet Other protocols include: - Email - FTP (file transfer protocol) - Peer-to-peer (torrent) - Domain Name System (DNS) How the Web works User enters domain Query goes to domain name system (DNS) server DNS server returns IP address IP address points to web host (server) Web host returns actual website Domains and Hosting Domains Easier to remember than a set of numbers www.google.com www : hostname google : name com : top level domain Getting a domain Anyone can get a domain, but you need to pay for it .com - can be registered for a year or more - often free with hosting .com.au - need to have an ABN to register Many more types available Hosting You pay a company to rent some space on their server They make sure their servers can: - handle traffic (bandwidth) - won\u2019t go offline Depending on your requirements, hosting can be cheap or really expensive Key terms HTML CSS HTML Hyper Text Markup Language Created by Tim Berners-Lee, first public version around 1991 For content - headings, paragraphs, defining images Tags already exist - you can\u2019t make them up 1 <p> This is a paragraph </p> CSS Cascading Style Sheets For appearance. First version in 1996 How to change colours, width, height etc: 1 2 3 4 p { background-color : #99cc00 ; font-size : 12 px ; } Don't combine them! HTML and CSS are independent They should not be combined So, no CSS inside a HTML document Don't use inline styles in your HTML: 1 2 3 <p style= \"background-color: #99cc00; font-size: 12px;\" > This is a paragraph </p> Production Process Common production process Design flat website Build website \u2018locally\u2019 (on your own computer) Upload to development server and test Fix any issues Deploy website to the world Suggested production process Sketching in code methodology Sketch website design on paper Start sketching in code Build website \u2018locally\u2019 Test in browser, Validate code, Fix A process of constant refinement.","title":"Introduction to the Web"},{"location":"module-2/html-1/#introduction-to-the-web","text":"","title":"Introduction to the Web"},{"location":"module-2/html-1/#introduction","text":"An introduction to the Web How the Web works Domains and hosting Production process Key terms (HTML and CSS)","title":"Introduction"},{"location":"module-2/html-1/#the-internet-and-the-web","text":"Used interchangeably but not the same thing The Web is a protocol on the internet Other protocols include: - Email - FTP (file transfer protocol) - Peer-to-peer (torrent) - Domain Name System (DNS)","title":"The internet and the Web"},{"location":"module-2/html-1/#how-the-web-works","text":"User enters domain Query goes to domain name system (DNS) server DNS server returns IP address IP address points to web host (server) Web host returns actual website","title":"How the Web works"},{"location":"module-2/html-1/#domains-and-hosting","text":"","title":"Domains and Hosting"},{"location":"module-2/html-1/#domains","text":"Easier to remember than a set of numbers www.google.com www : hostname google : name com : top level domain","title":"Domains"},{"location":"module-2/html-1/#getting-a-domain","text":"Anyone can get a domain, but you need to pay for it .com - can be registered for a year or more - often free with hosting .com.au - need to have an ABN to register Many more types available","title":"Getting a domain"},{"location":"module-2/html-1/#hosting","text":"You pay a company to rent some space on their server They make sure their servers can: - handle traffic (bandwidth) - won\u2019t go offline Depending on your requirements, hosting can be cheap or really expensive","title":"Hosting"},{"location":"module-2/html-1/#key-terms","text":"HTML CSS","title":"Key terms"},{"location":"module-2/html-1/#html","text":"Hyper Text Markup Language Created by Tim Berners-Lee, first public version around 1991 For content - headings, paragraphs, defining images Tags already exist - you can\u2019t make them up 1 <p> This is a paragraph </p>","title":"HTML"},{"location":"module-2/html-1/#css","text":"Cascading Style Sheets For appearance. First version in 1996 How to change colours, width, height etc: 1 2 3 4 p { background-color : #99cc00 ; font-size : 12 px ; }","title":"CSS"},{"location":"module-2/html-1/#dont-combine-them","text":"HTML and CSS are independent They should not be combined So, no CSS inside a HTML document Don't use inline styles in your HTML: 1 2 3 <p style= \"background-color: #99cc00; font-size: 12px;\" > This is a paragraph </p>","title":"Don't combine them!"},{"location":"module-2/html-1/#production-process","text":"","title":"Production Process"},{"location":"module-2/html-1/#common-production-process","text":"Design flat website Build website \u2018locally\u2019 (on your own computer) Upload to development server and test Fix any issues Deploy website to the world","title":"Common production process"},{"location":"module-2/html-1/#suggested-production-process","text":"Sketching in code methodology Sketch website design on paper Start sketching in code Build website \u2018locally\u2019 Test in browser, Validate code, Fix A process of constant refinement.","title":"Suggested production process"},{"location":"module-2/html-2/","text":"GitHub Introduction Signing up to GitHub GitHub desktop Pushing the repo Signing up to GitHub If you haven't already, you need to sign up to GitHub Go here: https://github.com/join Warning Don't use your student ID as your username. Download GitHub Desktop Once you've signed up, download GitHub Desktop: https://desktop.github.com/ It's a free for both Mac and PC It will allow you to easily push your work to GitHub Getting started Info TL;DR Basically, create a folder on your computer to hold all your website files. In this folder, make a new folder called 'assets', in the assets folder make 2 extra folders, call them: 'images' and 'css'. All in lowercase, no spaces. Create a repository Three ways: From GitHub.com From GitHub Desktop From Command Line We'll do it from GitHub Desktop. Tip A repository is often referred to as a 'repo' GitHub Desktop Open GitHub Desktop Click File > New Repository In the form that appears, fill in the following: Name: give your project a name e.g. mywebsite Description: brief desciption e.g website files for 11056 in winter 2019 Local Path: this is where the folder is saved on your computer. Choose a location - do not move the folder afterwards Initialize this repo: Tick Initialize this repo with a README Git Ignore: NONE License: NONE Now click Create Repository Go to the location where you said to create the repo and you should see the folder appear. Great, now move onto site setup!","title":"GitHub"},{"location":"module-2/html-2/#github","text":"","title":"GitHub"},{"location":"module-2/html-2/#introduction","text":"Signing up to GitHub GitHub desktop Pushing the repo","title":"Introduction"},{"location":"module-2/html-2/#signing-up-to-github","text":"If you haven't already, you need to sign up to GitHub Go here: https://github.com/join Warning Don't use your student ID as your username.","title":"Signing up to GitHub"},{"location":"module-2/html-2/#download-github-desktop","text":"Once you've signed up, download GitHub Desktop: https://desktop.github.com/ It's a free for both Mac and PC It will allow you to easily push your work to GitHub","title":"Download GitHub Desktop"},{"location":"module-2/html-2/#getting-started","text":"Info TL;DR Basically, create a folder on your computer to hold all your website files. In this folder, make a new folder called 'assets', in the assets folder make 2 extra folders, call them: 'images' and 'css'. All in lowercase, no spaces.","title":"Getting started"},{"location":"module-2/html-2/#create-a-repository","text":"Three ways: From GitHub.com From GitHub Desktop From Command Line We'll do it from GitHub Desktop. Tip A repository is often referred to as a 'repo'","title":"Create a repository"},{"location":"module-2/html-2/#github-desktop","text":"Open GitHub Desktop Click File > New Repository In the form that appears, fill in the following: Name: give your project a name e.g. mywebsite Description: brief desciption e.g website files for 11056 in winter 2019 Local Path: this is where the folder is saved on your computer. Choose a location - do not move the folder afterwards Initialize this repo: Tick Initialize this repo with a README Git Ignore: NONE License: NONE Now click Create Repository Go to the location where you said to create the repo and you should see the folder appear. Great, now move onto site setup!","title":"GitHub Desktop"},{"location":"module-2/html-3/","text":"Site Setup Introduction Setting up your workspace Getting file names right Workspace setup It is crucial to get the initial setup right Need to be aware of folder structure Helpful if you already know the page structure Info Errors in the folder structure and file names are the number 1 reason students fail the final assignment Folders When you created your GitHub repo, you created the folder that will hold your site. You need to ensure that you: - Save everything needed for the website inside that folder - Do not move the files around - you will break the links if you do - Put the assets (images, CSS file) in subfolders to help you organise - All HTML files should be in the root folder You need to use the required folder structure for your projects Required folder structure Root directory is the top-level folder (the repo folder) - I.e. the folder that contains any sub-folders - All HTML files MUST be in the root directory Inside the root directory, you will have an assets folder it will contain at least two extra folders: - One for your CSS - One for your images Case sensitive The web is case sensitive That means: ALL folder and filenames must match - assets/Images and assets/images are not the same Keep folder and filenames in lowercase for simplicity File names As before, Errors in the folder structure and file names are the number 1 reason students fail the final assignment Get it right at the beginning File name rules There are some rules on the web that you must follow If you don\u2019t, your website won\u2019t work online There are some exceptions, but for this project we have certain requirements, make sure you know what they are... Rule 1: lowercase All filenames must be in lowercase On the Web, mypage.html is different to Mypage.html Rule 2: no spaces There cannot be any spaces in filenames (or folders) If the filename was my page.html and in the code you linked to the file as mypage.html it would not load Rule 3: default naming The homepage must be called index.html Regardless of what you want to call the first page of your website, the filename must be index.html Not: homepage.html , default.html or anything else Rules again... All filenames must be in lowercase There cannot be any spaces in filenames (or folders) The homepage must be called index.html File location HTML files must be in the root folder CSS file to go in assets/css All images in assets/images This might seem overly specific now, but small mistakes at this stage can cause huge issues later.","title":"Site Setup"},{"location":"module-2/html-3/#site-setup","text":"","title":"Site Setup"},{"location":"module-2/html-3/#introduction","text":"Setting up your workspace Getting file names right","title":"Introduction"},{"location":"module-2/html-3/#workspace-setup","text":"It is crucial to get the initial setup right Need to be aware of folder structure Helpful if you already know the page structure Info Errors in the folder structure and file names are the number 1 reason students fail the final assignment","title":"Workspace setup"},{"location":"module-2/html-3/#folders","text":"When you created your GitHub repo, you created the folder that will hold your site. You need to ensure that you: - Save everything needed for the website inside that folder - Do not move the files around - you will break the links if you do - Put the assets (images, CSS file) in subfolders to help you organise - All HTML files should be in the root folder You need to use the required folder structure for your projects","title":"Folders"},{"location":"module-2/html-3/#required-folder-structure","text":"Root directory is the top-level folder (the repo folder) - I.e. the folder that contains any sub-folders - All HTML files MUST be in the root directory Inside the root directory, you will have an assets folder it will contain at least two extra folders: - One for your CSS - One for your images","title":"Required folder structure"},{"location":"module-2/html-3/#case-sensitive","text":"The web is case sensitive That means: ALL folder and filenames must match - assets/Images and assets/images are not the same Keep folder and filenames in lowercase for simplicity","title":"Case sensitive"},{"location":"module-2/html-3/#file-names","text":"As before, Errors in the folder structure and file names are the number 1 reason students fail the final assignment Get it right at the beginning","title":"File names"},{"location":"module-2/html-3/#file-name-rules","text":"There are some rules on the web that you must follow If you don\u2019t, your website won\u2019t work online There are some exceptions, but for this project we have certain requirements, make sure you know what they are...","title":"File name rules"},{"location":"module-2/html-3/#rule-1-lowercase","text":"All filenames must be in lowercase On the Web, mypage.html is different to Mypage.html","title":"Rule 1: lowercase"},{"location":"module-2/html-3/#rule-2-no-spaces","text":"There cannot be any spaces in filenames (or folders) If the filename was my page.html and in the code you linked to the file as mypage.html it would not load","title":"Rule 2: no spaces"},{"location":"module-2/html-3/#rule-3-default-naming","text":"The homepage must be called index.html Regardless of what you want to call the first page of your website, the filename must be index.html Not: homepage.html , default.html or anything else","title":"Rule 3: default naming"},{"location":"module-2/html-3/#rules-again","text":"All filenames must be in lowercase There cannot be any spaces in filenames (or folders) The homepage must be called index.html","title":"Rules again..."},{"location":"module-2/html-3/#file-location","text":"HTML files must be in the root folder CSS file to go in assets/css All images in assets/images This might seem overly specific now, but small mistakes at this stage can cause huge issues later.","title":"File location"},{"location":"module-2/html-4/","text":"Coding Software Introduction Let's briefly discuss various coding tools and their pros and cons A note about editors HTML and CSS are just plain text That means: You can open the files in any text editor There are no compatibility issues between programs Tip You do not need to pay for a program. Features you want Code hinting Colour coding Auto completion Many Options There are many, many different tools available All have different strengths and weaknesses No need to pay - the free tools are often better We will discuss: Dreamweaver Coda Sublime Text Notepad/TextEdit Brackets Dreamweaver Download: Dreamweaver Pros Lots of features Colour coding and autocompletion Cons Paid and only available as part of Adobe CC Tendency for students to get stuck using \u2018design\u2019 mode rather than \u2018code\u2019 view Coda Download: Coda Pros Lots of features Built in browser Colour coding/autocompletion Built in FTP for uploading to web Cons - Costs ~ $100 usd - Mac only Sublime Download: Sublime Pros Free Mac and PC Super fast Cons Overly simpilistic for first-time coders Notepad (PC)/TextEdit (Mac) Pros Free Plain text editors Cons No colour coding or autocompletion = increases chance of mistakes in code Brackets Download: Brackets Pros Free Mac and PC Great extensions Super fast Cons ? What should I use? Good question! We will use Brackets in the workshops You can use whatever you like, but, be careful: - if it generates code for you = fail","title":"Coding Software"},{"location":"module-2/html-4/#coding-software","text":"","title":"Coding Software"},{"location":"module-2/html-4/#introduction","text":"Let's briefly discuss various coding tools and their pros and cons","title":"Introduction"},{"location":"module-2/html-4/#a-note-about-editors","text":"HTML and CSS are just plain text That means: You can open the files in any text editor There are no compatibility issues between programs Tip You do not need to pay for a program.","title":"A note about editors"},{"location":"module-2/html-4/#features-you-want","text":"Code hinting Colour coding Auto completion","title":"Features you want"},{"location":"module-2/html-4/#many-options","text":"There are many, many different tools available All have different strengths and weaknesses No need to pay - the free tools are often better We will discuss: Dreamweaver Coda Sublime Text Notepad/TextEdit Brackets","title":"Many Options"},{"location":"module-2/html-4/#dreamweaver","text":"Download: Dreamweaver Pros Lots of features Colour coding and autocompletion Cons Paid and only available as part of Adobe CC Tendency for students to get stuck using \u2018design\u2019 mode rather than \u2018code\u2019 view","title":"Dreamweaver"},{"location":"module-2/html-4/#coda","text":"Download: Coda Pros Lots of features Built in browser Colour coding/autocompletion Built in FTP for uploading to web Cons - Costs ~ $100 usd - Mac only","title":"Coda"},{"location":"module-2/html-4/#sublime","text":"Download: Sublime Pros Free Mac and PC Super fast Cons Overly simpilistic for first-time coders","title":"Sublime"},{"location":"module-2/html-4/#notepad-pctextedit-mac","text":"Pros Free Plain text editors Cons No colour coding or autocompletion = increases chance of mistakes in code","title":"Notepad (PC)/TextEdit (Mac)"},{"location":"module-2/html-4/#brackets","text":"Download: Brackets Pros Free Mac and PC Great extensions Super fast Cons ?","title":"Brackets"},{"location":"module-2/html-4/#what-should-i-use","text":"Good question! We will use Brackets in the workshops You can use whatever you like, but, be careful: - if it generates code for you = fail","title":"What should I use?"},{"location":"module-2/html-5/","text":"Coding introduction Introduction Describe some key coding terms Outline the default HTML structure Describe how it works Key terms Elements Tags Attributes Key terms: elements Define the structure and content of objects within a page We want to write semantic HTML Using the most appropriate element for the content E.g. headings, paragraphs, nav, footer, aside Key terms: tags An element name surrounded by the less-than and greater-than angled brackets Most commonly occur in pairs They open and close Opens like: <div> Closes like: </div> What falls between is the content of a tag: 1 <div> ............ </div> Key terms: attributes Attributes are used inside a tag and provide further information about that element Can only be in the opening tag: 1 <div class= \"...\" > .... </div> Must follow the same format: attribute name equals sign quoted attribute value Key terms: attributes For example: 1 <a href= \u201dhttp://google.com\u201d > Google </a> or 1 <div id= \"col\" > .... </div> or 1 <header><h1 class= \"main\" > Site title </h1></header> Lowercase Keep your code in lowercase! Those terms again Elements The named description of the content Tags Element name wrapped in < and > Attributes Provide additional information about an element HTML structure All HTML documents have the same structure It is very specific If you put code in the wrong spot then you will have major issues when you validate the code later HTML structure Here is the basic html5 document structure: 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < head > < title ></ title > < meta charset = \"utf-8\" > </ head > < body > </ body > </ html > Let's break it down! HTML structure 1 <!DOCTYPE html> The first line of every document must declare what version of HTML you are writing This is known as the doctype declaration In HTML5 it is super short and easy to remember, previously it was much longer HTML structure 1 2 3 4 <html> </html> Following the doctype, the HTML element is declared It signifies the start of the document Don\u2019t forget to close it though, it also signifies the end of the document HTML structure 1 2 3 <head> <title></title> </head> The content within the <head> does not actually appear on the page This is where you set the title that appears in the browser Also where you will add the link to your CSS documents later Don\u2019t forget to close the tag! HTML structure 1 2 3 <body> <p> Content would go here </p> </body> All the visible content on the page must go between the <body> tags That means all text, images and layout tags Super simple page A very simple page would look like this: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > My first web page </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Hello World. </ h1 > < p > This is a basic web page. </ p > </ body > </ html > See page here .","title":"Coding introduction"},{"location":"module-2/html-5/#coding-introduction","text":"","title":"Coding introduction"},{"location":"module-2/html-5/#introduction","text":"Describe some key coding terms Outline the default HTML structure Describe how it works","title":"Introduction"},{"location":"module-2/html-5/#key-terms","text":"Elements Tags Attributes","title":"Key terms"},{"location":"module-2/html-5/#key-terms-elements","text":"Define the structure and content of objects within a page We want to write semantic HTML Using the most appropriate element for the content E.g. headings, paragraphs, nav, footer, aside","title":"Key terms: elements"},{"location":"module-2/html-5/#key-terms-tags","text":"An element name surrounded by the less-than and greater-than angled brackets Most commonly occur in pairs They open and close Opens like: <div> Closes like: </div> What falls between is the content of a tag: 1 <div> ............ </div>","title":"Key terms: tags"},{"location":"module-2/html-5/#key-terms-attributes","text":"Attributes are used inside a tag and provide further information about that element Can only be in the opening tag: 1 <div class= \"...\" > .... </div> Must follow the same format: attribute name equals sign quoted attribute value","title":"Key terms: attributes"},{"location":"module-2/html-5/#key-terms-attributes_1","text":"For example: 1 <a href= \u201dhttp://google.com\u201d > Google </a> or 1 <div id= \"col\" > .... </div> or 1 <header><h1 class= \"main\" > Site title </h1></header>","title":"Key terms: attributes"},{"location":"module-2/html-5/#lowercase","text":"Keep your code in lowercase!","title":"Lowercase"},{"location":"module-2/html-5/#those-terms-again","text":"Elements The named description of the content Tags Element name wrapped in < and > Attributes Provide additional information about an element","title":"Those terms again"},{"location":"module-2/html-5/#html-structure","text":"All HTML documents have the same structure It is very specific If you put code in the wrong spot then you will have major issues when you validate the code later","title":"HTML structure"},{"location":"module-2/html-5/#html-structure_1","text":"Here is the basic html5 document structure: 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < head > < title ></ title > < meta charset = \"utf-8\" > </ head > < body > </ body > </ html > Let's break it down!","title":"HTML structure"},{"location":"module-2/html-5/#html-structure_2","text":"1 <!DOCTYPE html> The first line of every document must declare what version of HTML you are writing This is known as the doctype declaration In HTML5 it is super short and easy to remember, previously it was much longer","title":"HTML structure"},{"location":"module-2/html-5/#html-structure_3","text":"1 2 3 4 <html> </html> Following the doctype, the HTML element is declared It signifies the start of the document Don\u2019t forget to close it though, it also signifies the end of the document","title":"HTML structure"},{"location":"module-2/html-5/#html-structure_4","text":"1 2 3 <head> <title></title> </head> The content within the <head> does not actually appear on the page This is where you set the title that appears in the browser Also where you will add the link to your CSS documents later Don\u2019t forget to close the tag!","title":"HTML structure"},{"location":"module-2/html-5/#html-structure_5","text":"1 2 3 <body> <p> Content would go here </p> </body> All the visible content on the page must go between the <body> tags That means all text, images and layout tags","title":"HTML structure"},{"location":"module-2/html-5/#super-simple-page","text":"A very simple page would look like this: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > My first web page </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Hello World. </ h1 > < p > This is a basic web page. </ p > </ body > </ html > See page here .","title":"Super simple page"},{"location":"module-2/html-6/","text":"Semantic HTML5 Introduction We'll look at semantic HTML Semantic HTML We will learn to write Semantic HTML Elements, attributes, and attribute values in HTML are defined to have certain meanings (semantics). For example, the ol element represents an ordered list, and the lang attribute represents the language of the content. (W3C, HTML 5.1 spec) Berners-Lee first discussed the concept in 2001. Essentially they provide meaning to the content on a HTML page, rather than just focusing on presentation. HTML5 Before HTML5 the structure/layout of a page was built using the <div> tag The <div> tag has no semantic value HTML5 brought new elements for semantically defining structure: 1 < header > , < nav > , < main > , < aside > , < footer > You must use some of these tags in your website. A Basic Page I will build a basic web page using semantic HTML I will use Brackets And some demo content You should: follow along! Semantic HTML5 tags Default HTML5 structure Heading tags <h1>, <h2>, <h3>, <h4>, <h5>, <h6> Paragraphs <p> Links <a href=\u201dlink.html\u201d>Link text</a> Images <img src=\u201dassets/images/images.jpg\u201d alt=\u201dimage description\u201d > Tags we covered 1 2 3 4 5 6 < header > < nav > < main > < section > < aside > < footer >","title":"Semantic HTML5"},{"location":"module-2/html-6/#semantic-html5","text":"","title":"Semantic HTML5"},{"location":"module-2/html-6/#introduction","text":"We'll look at semantic HTML","title":"Introduction"},{"location":"module-2/html-6/#semantic-html","text":"We will learn to write Semantic HTML Elements, attributes, and attribute values in HTML are defined to have certain meanings (semantics). For example, the ol element represents an ordered list, and the lang attribute represents the language of the content. (W3C, HTML 5.1 spec) Berners-Lee first discussed the concept in 2001. Essentially they provide meaning to the content on a HTML page, rather than just focusing on presentation.","title":"Semantic HTML"},{"location":"module-2/html-6/#html5","text":"Before HTML5 the structure/layout of a page was built using the <div> tag The <div> tag has no semantic value HTML5 brought new elements for semantically defining structure: 1 < header > , < nav > , < main > , < aside > , < footer > You must use some of these tags in your website.","title":"HTML5"},{"location":"module-2/html-6/#a-basic-page","text":"I will build a basic web page using semantic HTML I will use Brackets And some demo content You should: follow along!","title":"A Basic Page"},{"location":"module-2/html-6/#semantic-html5-tags","text":"Default HTML5 structure Heading tags <h1>, <h2>, <h3>, <h4>, <h5>, <h6> Paragraphs <p> Links <a href=\u201dlink.html\u201d>Link text</a> Images <img src=\u201dassets/images/images.jpg\u201d alt=\u201dimage description\u201d >","title":"Semantic HTML5 tags"},{"location":"module-2/html-6/#tags-we-covered","text":"1 2 3 4 5 6 < header > < nav > < main > < section > < aside > < footer >","title":"Tags we covered"},{"location":"module-2/html-7/","text":"Navigation Introduction Navigation on your website Semantic HTML Must be created using the unordered list tag: 1 2 3 4 <ul> <li> List item </li> <li> List item </li> </ul> When I say must, I'm not kidding, if you don't use the <ul> tag then you'll fail the html component Navigation Your navigation might look like: 1 2 3 4 5 <ul> <li><a href= \u201dindex.html\u201d > Home </a></li> <li><a href= \u201dabout.html\u201d > About </a></li> <li><a href= \u201dhistory.html\u201d > History </a></li> </ul>","title":"Navigation"},{"location":"module-2/html-7/#navigation","text":"","title":"Navigation"},{"location":"module-2/html-7/#introduction","text":"Navigation on your website","title":"Introduction"},{"location":"module-2/html-7/#semantic-html","text":"Must be created using the unordered list tag: 1 2 3 4 <ul> <li> List item </li> <li> List item </li> </ul> When I say must, I'm not kidding, if you don't use the <ul> tag then you'll fail the html component","title":"Semantic HTML"},{"location":"module-2/html-7/#navigation_1","text":"Your navigation might look like: 1 2 3 4 5 <ul> <li><a href= \u201dindex.html\u201d > Home </a></li> <li><a href= \u201dabout.html\u201d > About </a></li> <li><a href= \u201dhistory.html\u201d > History </a></li> </ul>","title":"Navigation"},{"location":"module-2/html-8/","text":"Validation Introduction We\u2019ll look at validation What it is Why it is important How can you do it Validate your code Validation is extremely important! It will check your code for errors You can then fix these issues (hopefully) If you can\u2019t resolve the error, then ask us! Validator W3C Validator: http://validator.w3.org Many code editors will have a validation plugin Here's one for Brackets: Nu Markup Checker To install, click the little brick icon on the right hand side, then type 'nu markup' and hit 'install'","title":"Validation"},{"location":"module-2/html-8/#validation","text":"","title":"Validation"},{"location":"module-2/html-8/#introduction","text":"We\u2019ll look at validation What it is Why it is important How can you do it","title":"Introduction"},{"location":"module-2/html-8/#validate-your-code","text":"Validation is extremely important! It will check your code for errors You can then fix these issues (hopefully) If you can\u2019t resolve the error, then ask us!","title":"Validate your code"},{"location":"module-2/html-8/#validator","text":"W3C Validator: http://validator.w3.org Many code editors will have a validation plugin Here's one for Brackets: Nu Markup Checker To install, click the little brick icon on the right hand side, then type 'nu markup' and hit 'install'","title":"Validator"},{"location":"module-2/html-9-common-tags/","text":"Common Tags It is likely that you will only need a small selection of HTML tags to markup your content. A full listing of HTML tags, with definitions and examples, can be found here: Mozilla HTML tag reference Here are some of the more common tags and links to further information: Common tags for sections of content header main footer aside section article div > (wherever possible use a meaningful tag rather than div Common content tags <h1><h2><h3><h4><h5><h6> <p> <nav> <blockquote > <a href=\"http://canberra.edu.au\" > <img src=\"images/logo.png\" alt=\"image description > Lists & groups of items Unordered list Ordered list Tabular data (only) Note that if you use the table tag to layout content then you will be marked down significantly. < table > Form elements Text input field Text field for search strings. \"placeholder\" is the placeholder text to display inside the empty field. Text field for telephone number Text field for email address Text field for password A push button. The \"value\" text appears on the button. A checkbox Comments To include a comment in your HTML document, use the following: Be aware that a CSS comment looks different to a HTML comment. You cannot include a HTML comment in your CSS or a CSS comment in your HTML document.","title":"Common Tags"},{"location":"module-2/html-9-common-tags/#common-tags","text":"It is likely that you will only need a small selection of HTML tags to markup your content. A full listing of HTML tags, with definitions and examples, can be found here: Mozilla HTML tag reference Here are some of the more common tags and links to further information:","title":"Common Tags"},{"location":"module-2/html-9-common-tags/#common-tags-for-sections-of-content","text":"header main footer aside section article div > (wherever possible use a meaningful tag rather than div","title":"Common tags for sections of content"},{"location":"module-2/html-9-common-tags/#common-content-tags","text":"<h1><h2><h3><h4><h5><h6> <p> <nav> <blockquote > <a href=\"http://canberra.edu.au\" > <img src=\"images/logo.png\" alt=\"image description >","title":"Common content tags"},{"location":"module-2/html-9-common-tags/#lists-groups-of-items","text":"Unordered list Ordered list","title":"Lists &amp; groups of items"},{"location":"module-2/html-9-common-tags/#tabular-data-only","text":"Note that if you use the table tag to layout content then you will be marked down significantly. < table >","title":"Tabular data (only)"},{"location":"module-2/html-9-common-tags/#form-elements","text":"Text input field Text field for search strings. \"placeholder\" is the placeholder text to display inside the empty field. Text field for telephone number Text field for email address Text field for password A push button. The \"value\" text appears on the button. A checkbox","title":"Form elements"},{"location":"module-2/html-9-common-tags/#comments","text":"To include a comment in your HTML document, use the following: Be aware that a CSS comment looks different to a HTML comment. You cannot include a HTML comment in your CSS or a CSS comment in your HTML document.","title":"Comments"},{"location":"module-2/slides/","text":"HTML Slides HTML Web Introduction GitHub Site Setup Coding Software Coding Introduction Semantic HTML Navigation Validation","title":"HTML Slides"},{"location":"module-2/slides/#html-slides","text":"","title":"HTML Slides"},{"location":"module-2/slides/#html","text":"Web Introduction GitHub Site Setup Coding Software Coding Introduction Semantic HTML Navigation Validation","title":"HTML"},{"location":"module-3/","text":"Module 3: CSS This module Now that you understand HTML, we'll move onto looking at CSS: the presentation layer. You will learn how to: write concise and efficient CSS how to attach the stylesheet to your pages how to achieve the stylistic aims of your site Module Content CSS CSS Fundamentals Box model and positioning Typography Styling navigation Links and images Wrappers Bringing it all together Slides The information on the pages above is also available as slides (generally used for presentation in class) here . Additional Resources One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Module 3: CSS"},{"location":"module-3/#module-3-css","text":"","title":"Module 3: CSS"},{"location":"module-3/#this-module","text":"Now that you understand HTML, we'll move onto looking at CSS: the presentation layer. You will learn how to: write concise and efficient CSS how to attach the stylesheet to your pages how to achieve the stylistic aims of your site","title":"This module"},{"location":"module-3/#module-content","text":"","title":"Module Content"},{"location":"module-3/#css","text":"CSS Fundamentals Box model and positioning Typography Styling navigation Links and images Wrappers Bringing it all together","title":"CSS"},{"location":"module-3/#slides","text":"The information on the pages above is also available as slides (generally used for presentation in class) here .","title":"Slides"},{"location":"module-3/#additional-resources","text":"One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Additional Resources"},{"location":"module-3/css-1/","text":"CSS 1: CSS Fundamentals Introduction Why is it called CSS? Basic syntax Targeting elements Basic properties Why CSS? Stands for: Cascading Style Sheets Styles cascade from the top to the bottom Styles added later can override ones from the top Works internally as well If you include the same property twice, the latter one will be used Syntax Linking to your CSS file The link to your stylesheet should look like: 1 < link rel = \"stylesheet\" href = \"assets/css/styles.css\" > It will go in the <head> of the html page The file should be saved in the css folder, which is inside the assets folder All file names and folder names are in lowercase and no spaces CSS reset In addition to your primary CSS document, you'll also have use a CSS reset file. Why? Each browser has different default styles built in, but they aren't consistent. Why? As Chris Coyier (of CSS Tricks) explains : the whole idea of a CSS reset is to deal with styling inconsistencies across browsers. For example, just now I popped a <button> onto a page with no other styling whatsoever. Chrome applies padding: 2px 6px 3px; - Firefox applies padding: 0 8px; . A CSS reset would apply new padding to that element, so that all browsers are consistent about what they apply. Two main options Eric Meyer\u2019s reset: http://meyerweb.com/eric/tools/css/reset/ Normalize.css: http://necolas.github.io/normalize.css/ Have a go We will create a CSS file Save it in the correct location Link to it from our HTML page Do the same with a reset file Write some basic styles","title":"CSS 1: CSS Fundamentals"},{"location":"module-3/css-1/#css-1-css-fundamentals","text":"","title":"CSS 1: CSS Fundamentals"},{"location":"module-3/css-1/#introduction","text":"Why is it called CSS? Basic syntax Targeting elements Basic properties","title":"Introduction"},{"location":"module-3/css-1/#why-css","text":"Stands for: Cascading Style Sheets Styles cascade from the top to the bottom Styles added later can override ones from the top Works internally as well If you include the same property twice, the latter one will be used","title":"Why CSS?"},{"location":"module-3/css-1/#syntax","text":"","title":"Syntax"},{"location":"module-3/css-1/#linking-to-your-css-file","text":"The link to your stylesheet should look like: 1 < link rel = \"stylesheet\" href = \"assets/css/styles.css\" > It will go in the <head> of the html page The file should be saved in the css folder, which is inside the assets folder All file names and folder names are in lowercase and no spaces","title":"Linking to your CSS file"},{"location":"module-3/css-1/#css-reset","text":"In addition to your primary CSS document, you'll also have use a CSS reset file. Why? Each browser has different default styles built in, but they aren't consistent.","title":"CSS reset"},{"location":"module-3/css-1/#why","text":"As Chris Coyier (of CSS Tricks) explains : the whole idea of a CSS reset is to deal with styling inconsistencies across browsers. For example, just now I popped a <button> onto a page with no other styling whatsoever. Chrome applies padding: 2px 6px 3px; - Firefox applies padding: 0 8px; . A CSS reset would apply new padding to that element, so that all browsers are consistent about what they apply.","title":"Why?"},{"location":"module-3/css-1/#two-main-options","text":"Eric Meyer\u2019s reset: http://meyerweb.com/eric/tools/css/reset/ Normalize.css: http://necolas.github.io/normalize.css/","title":"Two main options"},{"location":"module-3/css-1/#have-a-go","text":"We will create a CSS file Save it in the correct location Link to it from our HTML page Do the same with a reset file Write some basic styles","title":"Have a go"},{"location":"module-3/css-2/","text":"CSS 2: Box model and positioning Introduction What is the box model? CSS properties that can be styled The Box Model Basically, everything on the page is a box. You can the define various options about the box: it's position, size, colour etc using CSS. Key Properties When considering the box model, the key properties are: display width height margin padding border CSS positioning We will look at how to position elements in CSS Key properties float (Only left or right) padding margin","title":"CSS 2: Box model and positioning"},{"location":"module-3/css-2/#css-2-box-model-and-positioning","text":"","title":"CSS 2: Box model and positioning"},{"location":"module-3/css-2/#introduction","text":"What is the box model? CSS properties that can be styled","title":"Introduction"},{"location":"module-3/css-2/#the-box-model","text":"Basically, everything on the page is a box. You can the define various options about the box: it's position, size, colour etc using CSS.","title":"The Box Model"},{"location":"module-3/css-2/#key-properties","text":"When considering the box model, the key properties are: display width height margin padding border","title":"Key Properties"},{"location":"module-3/css-2/#css-positioning","text":"We will look at how to position elements in CSS","title":"CSS positioning"},{"location":"module-3/css-2/#key-properties_1","text":"float (Only left or right) padding margin","title":"Key properties"},{"location":"module-3/css-3/","text":"CSS 3: Wrappers Introduction What are they How to use them Setting the width When you start building a website, you'll quickly realise that the content always fills the whole, which is rarely what you want. To overcome this, you generally want to add an element where you can define the width and hold everything on the page inside that. As Coyier explains: Sometimes the first bit of HTML we write in a new document is an element that wraps everything else on the page. The term wrapper is common for that. We give it a class, and that class is responsible for encapsulating all visual elements on the page. The technique The best approach is to add a new <div> to the page, below the first <body> tag, and closed before the last </body> tag. Give it a class, and then set the width. Tip You'll notice that I've used a <div> . That's because this element has no semantic meaning - it is just a generic container. HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE html> < html lang = \"en\" > < head > < title > My first web page </ title > < meta charset = \"utf-8\" > </ head > < body > < div class = \"wrapper\" > < h1 > Hello World. </ h1 > < p > This is a basic web page. </ p > </ div > </ body > </ html > CSS 1 2 3 4 5 6 7 .wrapper { width: 980 px ; margin-right: auto ; margin-left: auto ; margin-top: 0 ; margin-bottom: 0 ; } or shorthand: 1 2 3 4 .wrapper { width: 980 px ; margin: 0 auto ; } margin: 0 auto means that the margin on the top is 0, left and right is auto (the same), so it will automatically position the page in the middle of the browser window.","title":"CSS 3: Wrappers"},{"location":"module-3/css-3/#css-3-wrappers","text":"","title":"CSS 3: Wrappers"},{"location":"module-3/css-3/#introduction","text":"What are they How to use them","title":"Introduction"},{"location":"module-3/css-3/#setting-the-width","text":"When you start building a website, you'll quickly realise that the content always fills the whole, which is rarely what you want. To overcome this, you generally want to add an element where you can define the width and hold everything on the page inside that. As Coyier explains: Sometimes the first bit of HTML we write in a new document is an element that wraps everything else on the page. The term wrapper is common for that. We give it a class, and that class is responsible for encapsulating all visual elements on the page.","title":"Setting the width"},{"location":"module-3/css-3/#the-technique","text":"The best approach is to add a new <div> to the page, below the first <body> tag, and closed before the last </body> tag. Give it a class, and then set the width. Tip You'll notice that I've used a <div> . That's because this element has no semantic meaning - it is just a generic container.","title":"The technique"},{"location":"module-3/css-3/#html","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <!DOCTYPE html> < html lang = \"en\" > < head > < title > My first web page </ title > < meta charset = \"utf-8\" > </ head > < body > < div class = \"wrapper\" > < h1 > Hello World. </ h1 > < p > This is a basic web page. </ p > </ div > </ body > </ html >","title":"HTML"},{"location":"module-3/css-3/#css","text":"1 2 3 4 5 6 7 .wrapper { width: 980 px ; margin-right: auto ; margin-left: auto ; margin-top: 0 ; margin-bottom: 0 ; } or shorthand: 1 2 3 4 .wrapper { width: 980 px ; margin: 0 auto ; } margin: 0 auto means that the margin on the top is 0, left and right is auto (the same), so it will automatically position the page in the middle of the browser window.","title":"CSS"},{"location":"module-3/css-4/","text":"CSS 4: Typography Introduction We will look at how to style text in CSS Key properties We will discuss the following: 1 2 3 4 5 6 7 h2 { font-family : ; font-size : ; font-weight : ; line-height : ; color : ; } Want more? Check the Mozilla CSS Fonts docs for all available options Evnvato post on creative font techniques","title":"CSS 4: Typography"},{"location":"module-3/css-4/#css-4-typography","text":"","title":"CSS 4: Typography"},{"location":"module-3/css-4/#introduction","text":"We will look at how to style text in CSS","title":"Introduction"},{"location":"module-3/css-4/#key-properties","text":"We will discuss the following: 1 2 3 4 5 6 7 h2 { font-family : ; font-size : ; font-weight : ; line-height : ; color : ; }","title":"Key properties"},{"location":"module-3/css-4/#want-more","text":"Check the Mozilla CSS Fonts docs for all available options Evnvato post on creative font techniques","title":"Want more?"},{"location":"module-3/css-5/","text":"CSS 5: Styling navigation Introduction How to style the navigation Important to remember: Warning All navigation must be within a <ul> tag Only primary navigation should be within the <nav> tag","title":"CSS 5: Styling navigation"},{"location":"module-3/css-5/#css-5-styling-navigation","text":"","title":"CSS 5: Styling navigation"},{"location":"module-3/css-5/#introduction","text":"How to style the navigation Important to remember: Warning All navigation must be within a <ul> tag Only primary navigation should be within the <nav> tag","title":"Introduction"},{"location":"module-3/css-6/","text":"CSS 6: Links and images Introduction How to make links look a bit more interesting Dealing with images Link/anchors Key properties you might like to change are: 1 2 3 4 a {} a : hover {} a : visited {} a : active {} Images Many of the basic box-model properties can also be applied to images. Try and see what the following do: width height margin padding border","title":"CSS 6: Links and images"},{"location":"module-3/css-6/#css-6-links-and-images","text":"","title":"CSS 6: Links and images"},{"location":"module-3/css-6/#introduction","text":"How to make links look a bit more interesting Dealing with images","title":"Introduction"},{"location":"module-3/css-6/#linkanchors","text":"Key properties you might like to change are: 1 2 3 4 a {} a : hover {} a : visited {} a : active {}","title":"Link/anchors"},{"location":"module-3/css-6/#images","text":"Many of the basic box-model properties can also be applied to images. Try and see what the following do: width height margin padding border","title":"Images"},{"location":"module-3/css-7/","text":"CSS 7: Bringing it all together Let\u2019s make our demo site like like an actual web site Make sure you validate as you go!","title":"CSS 7: Bringing it all together"},{"location":"module-3/css-7/#css-7-bringing-it-all-together","text":"Let\u2019s make our demo site like like an actual web site Make sure you validate as you go!","title":"CSS 7: Bringing it all together"},{"location":"module-3/slides/","text":"CSS Slides CSS CSS fundamentals Box model and positioning Wrappers Typography Navigation Links and images Bringing it all together","title":"CSS Slides"},{"location":"module-3/slides/#css-slides","text":"","title":"CSS Slides"},{"location":"module-3/slides/#css","text":"CSS fundamentals Box model and positioning Wrappers Typography Navigation Links and images Bringing it all together","title":"CSS"},{"location":"module-4/","text":"Module 4: Responsive CSS This module The content in this module will allow you to expand your understanding of CSS by introducing the concept of responsive CSS. You will learn: Where the concept emerged from How to write CSS media queries How to define appropriate breakpoints All about relative units, flexible images, grid systems Module Content Theories and Concepts Getting started Media Queries Grid Systems Frameworks Additional Resources A Book Apart: Responsive Web Design, Ethan Marcotte, 2011 A Book Apart: Mobile First, Luke Wroblewski, 2011 Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine: Specificity in CSS","title":"Module 4: Responsive CSS"},{"location":"module-4/#module-4-responsive-css","text":"","title":"Module 4: Responsive CSS"},{"location":"module-4/#this-module","text":"The content in this module will allow you to expand your understanding of CSS by introducing the concept of responsive CSS. You will learn: Where the concept emerged from How to write CSS media queries How to define appropriate breakpoints All about relative units, flexible images, grid systems","title":"This module"},{"location":"module-4/#module-content","text":"Theories and Concepts Getting started Media Queries Grid Systems Frameworks","title":"Module Content"},{"location":"module-4/#additional-resources","text":"A Book Apart: Responsive Web Design, Ethan Marcotte, 2011 A Book Apart: Mobile First, Luke Wroblewski, 2011 Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine: Specificity in CSS","title":"Additional Resources"},{"location":"module-4/responsive-1/","text":"Responsive 1: Theories and Concepts Introduction This page will provide some context about where responsive web design emerged from before looking at the key theories and concepts in a bit more detail. Describe syntax of media queries Discuss how to design for multiple devices The context Where does responsive web design emerge from? Bandaid #1: The mobile site How many times have you seen this? http://mobile.website.com... This was the bandaid of choice 5 years ago, with hundreds of thousands of companies being sold a mobile-specific version of their site. * Delivers different content * Delivers mobile content to desktop users * Doesn\u2019t cater for new tech * Automates nasty redirects * Often hard to find original site Bandaid #2: The classic trio Trying to cater to a set range of specific device types & sizes: Mobile / Tablet / Desktop Bandaid #3: The App Even now, companies are being sold mobile apps as a solution to their responsive woes. An App is a tool that makes use of native device features such as location based services, notifications, or sensors such as camera, microphone and accelerometer. An app is not the answer to viewing websites on your mobile device. The solution There is no way to cater for every possible screen size, unless we build designs that can respond to whatever device they\u2019re used with. Smart TVs? Game Consoles? Watches? New smart phones? With the huge surge in device styles, sizes and types, we cannot design for everything. What new inventions are coming in the next 5 years? Make it flexible! Responsive Web design is the approach that suggests that design and development should: respond to the user\u2019s behaviour and environment based on screen size, platform and orientation Uses a mix of flexible grids and layouts, images and CSS media queries. Theories and concepts Mobile first design The first mention of mobile-specific design was by Luke Wroblewski in late 2009. In a short blog post he stated: So when a team designs mobile first, the end result is an experience focused on the key tasks users want to accomplish without the extraneous detours and general interface debris that litter today's desktop-accessed Web sites. That's good user experience and good for business. Mobile First by Luke Wroblewski (2009). You've probably seen this around, primarily the argument is that most users interact with a site through their nobile, so when you are designing a site from scratch, you should start with the mobile version and then scale up. Responsive Web Design The term 'Responsive Web Design' was coined by Ethan Marcotte in May 2010. Expanding on Wrobkewski's idea of mobile first deisgn, he writes that: Working on the web, however, is a wholly different matter. Our work is defined by its transience, often refined or replaced within a year or two. Inconsistent window widths, screen resolutions, user preferences, and our users\u2019 installed fonts are but a few of the intangibles we negotiate when we publish our work, and over the years, we\u2019ve become incredibly adept at doing so. But the landscape is shifting, perhaps more quickly than we might like. Mobile browsing is expected to outpace desktop-based access within three to five years. Two of the three dominant video game consoles have web browsers (and one of them is quite excellent). We\u2019re designing for mice and keyboards, for T9 keypads, for handheld game controllers, for touch interfaces. In short, we\u2019re faced with a greater number of devices, input modes, and browsers than ever before. And later: Rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience. You should read the rest of the post on A List Apart . Essentially, the argument is that a Web site should respond to the needs of the user, regardless of the device they are using to access it. It seems obvious now, but it wasn't always this way. For more context, read the Wikipedia page entry: Responve Web Design which provides a wealth of additional resources. Other theories and concepts As you might have started to realise, when it comes to web design and development, there are a lot of different theories and concepts that emerge and then disappear as new ones increase in popularity. Other concepts you might see include: Graceful degradation The idea here is that a designer would create a web page using the latest tools and technology available to them, but the site would still remain usable/presentable even if the user didn't have those tools or technology installed. You might have seen this with old Flash-based video sites, you could still access the website, but you'd get a notice advising you to install the latest version of Flash player so that you could use the site in the way the designer anticipated. Progressive enhancement This concept dates back to 2003. The W3C explains it as: You start by establishing a basic level of user experience that all browsers will be able to provide when rendering your web site, but you also build in more advanced functionality that will automatically be available to browsers that can use it. There is a great comparison of the two from the W3C here: Graceful degradation versus progressive enhancement Flexible design This concept predates responsive web design, but could certinaly be considered as an early push in the right direction. It was first published in a book by Zoe Gillenwater, (2008), availabe in the UC library and online . The aim here is to consider how to build CSS layouts which respond to different screen sizes - on a desktop computer. It was targeted at designers who has always worked with print-based grid layouts and needed to reconsider how they could be used online. \u2018Journey driven design' A new theory to combat the popularity of mobile-first design . The argument here is that, yes, a lot of people do interact with the site on mobile - but they supplment their browsing with both desktop and tablet devices. So, in turn, we should think about the entire journey a user undertakes. Read more from Smashing Magazine here . The future... Does responsive website design end when you make a website that fluidly adapts it layout to different browser sizes? What about delivering the right content? Should a mobile device on data receive the same images as a desktop on broadband? What about changing the context? Do websites just resize all the way down for watches, and up for giant screens? Do they actually begin adapting to the context they're accessed in? New technology and devices? We can\u2019t begin to imagine what the next big tech is going to be. But we already know there are a few new ones that no one seems to know what to do with: smart homes, wearable tech, virtual reality. All of these utilise web technology as the underlying means of access - despite what they look like. We need to know how we can design for these varied interfaces. That's where the real power of responsive web design emerged. Info What does all this mean though? As you would have discovered in the Marcotte article, you'll write media queries in your CSS that allow you to target different device sizes. Readings Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine\u2019s breakdown Creating a Mobile-First Responsive Web Design Apps vs Website","title":"Responsive 1: Theories and Concepts"},{"location":"module-4/responsive-1/#responsive-1-theories-and-concepts","text":"","title":"Responsive 1: Theories and Concepts"},{"location":"module-4/responsive-1/#introduction","text":"This page will provide some context about where responsive web design emerged from before looking at the key theories and concepts in a bit more detail. Describe syntax of media queries Discuss how to design for multiple devices","title":"Introduction"},{"location":"module-4/responsive-1/#the-context","text":"Where does responsive web design emerge from?","title":"The context"},{"location":"module-4/responsive-1/#bandaid-1-the-mobile-site","text":"How many times have you seen this? http://mobile.website.com... This was the bandaid of choice 5 years ago, with hundreds of thousands of companies being sold a mobile-specific version of their site. * Delivers different content * Delivers mobile content to desktop users * Doesn\u2019t cater for new tech * Automates nasty redirects * Often hard to find original site","title":"Bandaid #1: The mobile site"},{"location":"module-4/responsive-1/#bandaid-2-the-classic-trio","text":"Trying to cater to a set range of specific device types & sizes: Mobile / Tablet / Desktop","title":"Bandaid #2: The classic trio"},{"location":"module-4/responsive-1/#bandaid-3-the-app","text":"Even now, companies are being sold mobile apps as a solution to their responsive woes. An App is a tool that makes use of native device features such as location based services, notifications, or sensors such as camera, microphone and accelerometer. An app is not the answer to viewing websites on your mobile device.","title":"Bandaid #3: The App"},{"location":"module-4/responsive-1/#the-solution","text":"There is no way to cater for every possible screen size, unless we build designs that can respond to whatever device they\u2019re used with. Smart TVs? Game Consoles? Watches? New smart phones? With the huge surge in device styles, sizes and types, we cannot design for everything. What new inventions are coming in the next 5 years?","title":"The solution"},{"location":"module-4/responsive-1/#make-it-flexible","text":"Responsive Web design is the approach that suggests that design and development should: respond to the user\u2019s behaviour and environment based on screen size, platform and orientation Uses a mix of flexible grids and layouts, images and CSS media queries.","title":"Make it flexible!"},{"location":"module-4/responsive-1/#theories-and-concepts","text":"","title":"Theories and concepts"},{"location":"module-4/responsive-1/#mobile-first-design","text":"The first mention of mobile-specific design was by Luke Wroblewski in late 2009. In a short blog post he stated: So when a team designs mobile first, the end result is an experience focused on the key tasks users want to accomplish without the extraneous detours and general interface debris that litter today's desktop-accessed Web sites. That's good user experience and good for business. Mobile First by Luke Wroblewski (2009). You've probably seen this around, primarily the argument is that most users interact with a site through their nobile, so when you are designing a site from scratch, you should start with the mobile version and then scale up.","title":"Mobile first design"},{"location":"module-4/responsive-1/#responsive-web-design","text":"The term 'Responsive Web Design' was coined by Ethan Marcotte in May 2010. Expanding on Wrobkewski's idea of mobile first deisgn, he writes that: Working on the web, however, is a wholly different matter. Our work is defined by its transience, often refined or replaced within a year or two. Inconsistent window widths, screen resolutions, user preferences, and our users\u2019 installed fonts are but a few of the intangibles we negotiate when we publish our work, and over the years, we\u2019ve become incredibly adept at doing so. But the landscape is shifting, perhaps more quickly than we might like. Mobile browsing is expected to outpace desktop-based access within three to five years. Two of the three dominant video game consoles have web browsers (and one of them is quite excellent). We\u2019re designing for mice and keyboards, for T9 keypads, for handheld game controllers, for touch interfaces. In short, we\u2019re faced with a greater number of devices, input modes, and browsers than ever before. And later: Rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience. You should read the rest of the post on A List Apart . Essentially, the argument is that a Web site should respond to the needs of the user, regardless of the device they are using to access it. It seems obvious now, but it wasn't always this way. For more context, read the Wikipedia page entry: Responve Web Design which provides a wealth of additional resources.","title":"Responsive Web Design"},{"location":"module-4/responsive-1/#other-theories-and-concepts","text":"As you might have started to realise, when it comes to web design and development, there are a lot of different theories and concepts that emerge and then disappear as new ones increase in popularity. Other concepts you might see include:","title":"Other theories and concepts"},{"location":"module-4/responsive-1/#graceful-degradation","text":"The idea here is that a designer would create a web page using the latest tools and technology available to them, but the site would still remain usable/presentable even if the user didn't have those tools or technology installed. You might have seen this with old Flash-based video sites, you could still access the website, but you'd get a notice advising you to install the latest version of Flash player so that you could use the site in the way the designer anticipated.","title":"Graceful degradation"},{"location":"module-4/responsive-1/#progressive-enhancement","text":"This concept dates back to 2003. The W3C explains it as: You start by establishing a basic level of user experience that all browsers will be able to provide when rendering your web site, but you also build in more advanced functionality that will automatically be available to browsers that can use it. There is a great comparison of the two from the W3C here: Graceful degradation versus progressive enhancement","title":"Progressive enhancement"},{"location":"module-4/responsive-1/#flexible-design","text":"This concept predates responsive web design, but could certinaly be considered as an early push in the right direction. It was first published in a book by Zoe Gillenwater, (2008), availabe in the UC library and online . The aim here is to consider how to build CSS layouts which respond to different screen sizes - on a desktop computer. It was targeted at designers who has always worked with print-based grid layouts and needed to reconsider how they could be used online.","title":"Flexible design"},{"location":"module-4/responsive-1/#journey-driven-design","text":"A new theory to combat the popularity of mobile-first design . The argument here is that, yes, a lot of people do interact with the site on mobile - but they supplment their browsing with both desktop and tablet devices. So, in turn, we should think about the entire journey a user undertakes. Read more from Smashing Magazine here .","title":"\u2018Journey driven design'"},{"location":"module-4/responsive-1/#the-future","text":"Does responsive website design end when you make a website that fluidly adapts it layout to different browser sizes? What about delivering the right content? Should a mobile device on data receive the same images as a desktop on broadband? What about changing the context? Do websites just resize all the way down for watches, and up for giant screens? Do they actually begin adapting to the context they're accessed in? New technology and devices? We can\u2019t begin to imagine what the next big tech is going to be. But we already know there are a few new ones that no one seems to know what to do with: smart homes, wearable tech, virtual reality. All of these utilise web technology as the underlying means of access - despite what they look like. We need to know how we can design for these varied interfaces. That's where the real power of responsive web design emerged. Info What does all this mean though? As you would have discovered in the Marcotte article, you'll write media queries in your CSS that allow you to target different device sizes.","title":"The future..."},{"location":"module-4/responsive-1/#readings","text":"Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine\u2019s breakdown Creating a Mobile-First Responsive Web Design Apps vs Website","title":"Readings"},{"location":"module-4/responsive-2/","text":"Responsive 2: Getting started Where to start? Before we move onto the code, let us consider a few extra important things. The content No amount of design or code can adequately fix content problems. Separate content and hierarchy from any single layout possibility, and work out what components & content your site needs. The importance of semantic HTML Remember how we talked about the value of semantic markup in the second module? Semantic markup is HTML that clearly defines the content <article> <form> <table> <section> <figure> <video> Non-semantic mark-up tells us nothing about the content <div> <span> Semantic markup is extremely portable, and ensures websites are ready to adapt to new contexts. Warning It is crucial that you use semantic markup when creating your websites. The Design","title":"Responsive 2: Getting started"},{"location":"module-4/responsive-2/#responsive-2-getting-started","text":"","title":"Responsive 2: Getting started"},{"location":"module-4/responsive-2/#where-to-start","text":"Before we move onto the code, let us consider a few extra important things.","title":"Where to start?"},{"location":"module-4/responsive-2/#the-content","text":"No amount of design or code can adequately fix content problems. Separate content and hierarchy from any single layout possibility, and work out what components & content your site needs.","title":"The content"},{"location":"module-4/responsive-2/#the-importance-of-semantic-html","text":"Remember how we talked about the value of semantic markup in the second module? Semantic markup is HTML that clearly defines the content <article> <form> <table> <section> <figure> <video> Non-semantic mark-up tells us nothing about the content <div> <span> Semantic markup is extremely portable, and ensures websites are ready to adapt to new contexts. Warning It is crucial that you use semantic markup when creating your websites.","title":"The importance of semantic HTML"},{"location":"module-4/responsive-2/#the-design","text":"","title":"The Design"},{"location":"module-4/responsive-3/","text":"Responsive 3: Media Queries Introduction Media queries Meet Media Queries Media Queries allow us to build on a flexible framework, and customise styles for different screen types and sizes. 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ). Core ingredients So what does it take to create a responsive design? Speaking purely in terms of front-end layout, it takes three core ingredients: Flexible grids & measurements Flexible images & media Media queries Use flexible everything Start with a flexible grid Use relative units ( rem , em , etc) Make your images flexible Make your code simple & robust Mobile first? Consider mobile first. That doesn\u2019t mean you need to code that way. You may choose to begin with wide views in order to get a handle on a more complex layout It can be easier to ensure columns and spacing are working on the wider views before working down to a single column Either way, ensure you considered responsive optimisation when you planned your content; screen sizes, connection speeds, device capabilities, fat fingers vs mouse pointers, hover states etc will all affect your coding. Relative units & Flexible Typesetting Em Rem Vw , vh & vmin Em 1em = 16px in most browsers You can set the document Root to 16px using CSS resets or by styling the body To convert your design\u2019s font-size to em , divide the desired target font-size (e.g. 24px ) by the container font-size (e.g. 16px ). 1 2 3 target \u00f7 context = result 24 \u00f7 16 = 1 . 5 font-size : 1 . 5em ; Em\u2019s are inherited Whenever you set an em-based font-size on any container, you now need to calculate any nested font sizes based on that new font-size ! Let\u2019s imagine a new target font-size of 11px : 1 2 11 \u00f7 24 = 0 . 45833333333333 em font - size : 0 . 45833333333333 em Don\u2019t round that number if you\u2019re trying to stay true to a design! 0.46em might be neater, but proportionately it wont match. Rem A relative unit, like em But it is always relative to the \"root\" element rather than using the inherited cascade like em does This vastly simplifies working with relative units! One great technique: Px at the Root, Rem for Components, Em for Text Elements Vw, vh & vmin CSS3 has some new values for sizing things relative to the current viewport size. 1vw = 1% of viewport width 1vh = 1% of viewport height 1vmin = 1vw or 1vh , whichever is smaller 1vmax = 1vw or 1vh , whichever is larger If the viewport is 40cm wide, 1vw = 0.4cm Flexible Grids How to get started with flexible grids? We can re-use the same formula that let us calculate ems! Make sure you also look at the CSS Grid Layout on the next page . From pixels to percentages target \u00f7 context = result 700 \u00f7 1000 = 0.7 = 70% 290 \u00f7 1000 = 0.3 = 29% 200 \u00f7 700 = 0.285 = 28.5% Flexible images An image with a specific size can be the bane of your existence when you\u2019re trying to build a responsive website. While there are many different advanced solutions, there is usually one very basic fix: 1 2 3 4 img { max-width : 100 % ; height : auto ; } This forces any image to adjust to the container width. Media queries As above (so you don't forget): 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ). Extra reading Read more about Media Queries ! Media Queries are the kings of Responsive Web Design. Specific ways to write fancy logic-based media queries based on different browser types, sizes, etc. Media Queries & Breakpoints We used to add media queries for the most popular mobile pixel dimensions. The explosion of new tablets, smartphones & touch devices means that we don\u2019t have a preset list of dimensions anymore! It\u2019s become standard to let media queried breakpoints be defined by content/layout rather than any specific device Whenever things don\u2019t fit or hierarchy breaks, add a media query I use min or max-width most often: this is a good way to keep your queries simple You can read about why basing your media queries on specific device sizes is doomed to failure . Extra reading Defining breakpoints CSS Tricks: Specificity Readings Trent Walton\u2019s blog (anything!): Fit to scale ; Fluid type ; Flexible foundations Examples of great responsive designs A minimal, free, wire framing tool CSS Tricks on relative units of measurement & how to use them","title":"Responsive 3: Media Queries"},{"location":"module-4/responsive-3/#responsive-3-media-queries","text":"","title":"Responsive 3: Media Queries"},{"location":"module-4/responsive-3/#introduction","text":"Media queries","title":"Introduction"},{"location":"module-4/responsive-3/#meet-media-queries","text":"Media Queries allow us to build on a flexible framework, and customise styles for different screen types and sizes. 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ).","title":"Meet Media Queries"},{"location":"module-4/responsive-3/#core-ingredients","text":"So what does it take to create a responsive design? Speaking purely in terms of front-end layout, it takes three core ingredients: Flexible grids & measurements Flexible images & media Media queries","title":"Core ingredients"},{"location":"module-4/responsive-3/#use-flexible-everything","text":"Start with a flexible grid Use relative units ( rem , em , etc) Make your images flexible Make your code simple & robust","title":"Use flexible everything"},{"location":"module-4/responsive-3/#mobile-first","text":"Consider mobile first. That doesn\u2019t mean you need to code that way. You may choose to begin with wide views in order to get a handle on a more complex layout It can be easier to ensure columns and spacing are working on the wider views before working down to a single column Either way, ensure you considered responsive optimisation when you planned your content; screen sizes, connection speeds, device capabilities, fat fingers vs mouse pointers, hover states etc will all affect your coding.","title":"Mobile first?"},{"location":"module-4/responsive-3/#relative-units-flexible-typesetting","text":"Em Rem Vw , vh & vmin","title":"Relative units &amp; Flexible Typesetting"},{"location":"module-4/responsive-3/#em","text":"1em = 16px in most browsers You can set the document Root to 16px using CSS resets or by styling the body To convert your design\u2019s font-size to em , divide the desired target font-size (e.g. 24px ) by the container font-size (e.g. 16px ). 1 2 3 target \u00f7 context = result 24 \u00f7 16 = 1 . 5 font-size : 1 . 5em ;","title":"Em"},{"location":"module-4/responsive-3/#ems-are-inherited","text":"Whenever you set an em-based font-size on any container, you now need to calculate any nested font sizes based on that new font-size ! Let\u2019s imagine a new target font-size of 11px : 1 2 11 \u00f7 24 = 0 . 45833333333333 em font - size : 0 . 45833333333333 em Don\u2019t round that number if you\u2019re trying to stay true to a design! 0.46em might be neater, but proportionately it wont match.","title":"Em\u2019s are inherited"},{"location":"module-4/responsive-3/#rem","text":"A relative unit, like em But it is always relative to the \"root\" element rather than using the inherited cascade like em does This vastly simplifies working with relative units! One great technique: Px at the Root, Rem for Components, Em for Text Elements","title":"Rem"},{"location":"module-4/responsive-3/#vw-vh-vmin","text":"CSS3 has some new values for sizing things relative to the current viewport size. 1vw = 1% of viewport width 1vh = 1% of viewport height 1vmin = 1vw or 1vh , whichever is smaller 1vmax = 1vw or 1vh , whichever is larger If the viewport is 40cm wide, 1vw = 0.4cm","title":"Vw, vh &amp; vmin"},{"location":"module-4/responsive-3/#flexible-grids","text":"How to get started with flexible grids? We can re-use the same formula that let us calculate ems! Make sure you also look at the CSS Grid Layout on the next page . From pixels to percentages target \u00f7 context = result 700 \u00f7 1000 = 0.7 = 70% 290 \u00f7 1000 = 0.3 = 29% 200 \u00f7 700 = 0.285 = 28.5%","title":"Flexible Grids"},{"location":"module-4/responsive-3/#flexible-images","text":"An image with a specific size can be the bane of your existence when you\u2019re trying to build a responsive website. While there are many different advanced solutions, there is usually one very basic fix: 1 2 3 4 img { max-width : 100 % ; height : auto ; } This forces any image to adjust to the container width.","title":"Flexible images"},{"location":"module-4/responsive-3/#media-queries","text":"As above (so you don't forget): 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ).","title":"Media queries"},{"location":"module-4/responsive-3/#extra-reading","text":"Read more about Media Queries ! Media Queries are the kings of Responsive Web Design. Specific ways to write fancy logic-based media queries based on different browser types, sizes, etc.","title":"Extra reading"},{"location":"module-4/responsive-3/#media-queries-breakpoints","text":"We used to add media queries for the most popular mobile pixel dimensions. The explosion of new tablets, smartphones & touch devices means that we don\u2019t have a preset list of dimensions anymore! It\u2019s become standard to let media queried breakpoints be defined by content/layout rather than any specific device Whenever things don\u2019t fit or hierarchy breaks, add a media query I use min or max-width most often: this is a good way to keep your queries simple You can read about why basing your media queries on specific device sizes is doomed to failure .","title":"Media Queries &amp; Breakpoints"},{"location":"module-4/responsive-3/#extra-reading_1","text":"Defining breakpoints CSS Tricks: Specificity","title":"Extra reading"},{"location":"module-4/responsive-3/#readings","text":"Trent Walton\u2019s blog (anything!): Fit to scale ; Fluid type ; Flexible foundations Examples of great responsive designs A minimal, free, wire framing tool CSS Tricks on relative units of measurement & how to use them","title":"Readings"},{"location":"module-4/responsive-4/","text":"Responsive 4: Grid Systems Introduction Grid Systems CSS Grid Layout You can use CSS grids to create complex responsive layouts whilst still ensuring the underlying page structure remains structured. Support was first added to Chrome, Firefox and Safari in March 2017. Grid Layout lets us properly separate the order of elements in the source from their visual presentation. As a designer this means you are free to change the location of page elements as is best for your layout at different breakpoints and not need to compromise a sensible structured document for your responsive design. CSS Tricks has a great guide to CSS Grid Layout Realizing common layouts using CSS Grid Layout from Mozilla MDN Flex-box The Flexbox Layout (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word \"flex\"). Read the CSS Tricks Complete Guide to Flexbox for a very detailed introduction. Grid or Flexbox You'll find lots of information online about this topic, but worth reading this great summary: Flexbox is for one-dimensional layouts - anything that needs to be laid out in a straight line (or in a broken line, which would be a single straight line if they were joined back together). Grid is for two-dimensional layouts. It can be used as a low-powered flexbox substitute (we're trying to make sure that a single-column/row grid acts very similar to a flexbox), but that's not using its full power. Flexbox is appropriate for many layouts, and a lot of \"page component\" elements, as most of them are fundamentally linear. Grid is appropriate for overall page layout, and for complicated page components which aren't linear in their design. The two can be composed arbitrarily, so once they're both widely supported, I believe most pages will be composed of an outer grid for the overall layout, a mix of nested flexboxes and grid for the components of the page, and finally block/inline/table layout at the \"leaves\" of the page, where the text and content live. CSS-grid-layout - Relationship with Flexbox","title":"Responsive 4: Grid Systems"},{"location":"module-4/responsive-4/#responsive-4-grid-systems","text":"","title":"Responsive 4: Grid Systems"},{"location":"module-4/responsive-4/#introduction","text":"Grid Systems","title":"Introduction"},{"location":"module-4/responsive-4/#css-grid-layout","text":"You can use CSS grids to create complex responsive layouts whilst still ensuring the underlying page structure remains structured. Support was first added to Chrome, Firefox and Safari in March 2017. Grid Layout lets us properly separate the order of elements in the source from their visual presentation. As a designer this means you are free to change the location of page elements as is best for your layout at different breakpoints and not need to compromise a sensible structured document for your responsive design. CSS Tricks has a great guide to CSS Grid Layout Realizing common layouts using CSS Grid Layout from Mozilla MDN","title":"CSS Grid Layout"},{"location":"module-4/responsive-4/#flex-box","text":"The Flexbox Layout (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word \"flex\"). Read the CSS Tricks Complete Guide to Flexbox for a very detailed introduction.","title":"Flex-box"},{"location":"module-4/responsive-4/#grid-or-flexbox","text":"You'll find lots of information online about this topic, but worth reading this great summary: Flexbox is for one-dimensional layouts - anything that needs to be laid out in a straight line (or in a broken line, which would be a single straight line if they were joined back together). Grid is for two-dimensional layouts. It can be used as a low-powered flexbox substitute (we're trying to make sure that a single-column/row grid acts very similar to a flexbox), but that's not using its full power. Flexbox is appropriate for many layouts, and a lot of \"page component\" elements, as most of them are fundamentally linear. Grid is appropriate for overall page layout, and for complicated page components which aren't linear in their design. The two can be composed arbitrarily, so once they're both widely supported, I believe most pages will be composed of an outer grid for the overall layout, a mix of nested flexboxes and grid for the components of the page, and finally block/inline/table layout at the \"leaves\" of the page, where the text and content live. CSS-grid-layout - Relationship with Flexbox","title":"Grid or Flexbox"},{"location":"module-4/responsive-5/","text":"Responsive 5: Frameworks Introduction Front-end Frameworks Front-end Frameworks Many of you would already have heard of Bootstrap, even from my warning at the beginning of the unit - \"don't use Bootstrap!\" Front-end frameworks are packages of pre-written code which are created to give you a base on which to build upon. They allow for rapid devlopment becuase you don't need to spend a huge amount of time creating your base elements, typography, navigation etc. As Bootstrap says: Bootstrap is an open source toolkit for developing with HTML, CSS, and JS. Quickly prototype your ideas or build your entire app with our Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins built on jQuery. A typical front-end framework would generally contain the following components: A grid which makes it simple to organise the design elements of your website Pre-defined typography settings - for headings, paragraphs, lists etc. Pre-built components like side panels, buttons, navigation, prompts etc Popular frameworks Two of the most common front-end frameworks are: Bootstrap Foundation And one I really like: Skeleton The problem with many frameworks is that developers/designers let the framework \"carry\" the design, rather than creating something unique. It is key to avoid counting on your framework to design your website. Don\u2019t let it determine your layout. Go and have a look at various websites and you'll quickly realise what I mean. Check out Every Bootstap Website Ever to really understand. Also, read this article: Why I shouldn't use a Web framework Don't use a framework for this unit, but do have a look, you'll might want to utilise one in the future!","title":"Responsive 5: Frameworks"},{"location":"module-4/responsive-5/#responsive-5-frameworks","text":"","title":"Responsive 5: Frameworks"},{"location":"module-4/responsive-5/#introduction","text":"Front-end Frameworks","title":"Introduction"},{"location":"module-4/responsive-5/#front-end-frameworks","text":"Many of you would already have heard of Bootstrap, even from my warning at the beginning of the unit - \"don't use Bootstrap!\" Front-end frameworks are packages of pre-written code which are created to give you a base on which to build upon. They allow for rapid devlopment becuase you don't need to spend a huge amount of time creating your base elements, typography, navigation etc. As Bootstrap says: Bootstrap is an open source toolkit for developing with HTML, CSS, and JS. Quickly prototype your ideas or build your entire app with our Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins built on jQuery. A typical front-end framework would generally contain the following components: A grid which makes it simple to organise the design elements of your website Pre-defined typography settings - for headings, paragraphs, lists etc. Pre-built components like side panels, buttons, navigation, prompts etc","title":"Front-end Frameworks"},{"location":"module-4/responsive-5/#popular-frameworks","text":"Two of the most common front-end frameworks are: Bootstrap Foundation And one I really like: Skeleton The problem with many frameworks is that developers/designers let the framework \"carry\" the design, rather than creating something unique. It is key to avoid counting on your framework to design your website. Don\u2019t let it determine your layout. Go and have a look at various websites and you'll quickly realise what I mean. Check out Every Bootstap Website Ever to really understand. Also, read this article: Why I shouldn't use a Web framework Don't use a framework for this unit, but do have a look, you'll might want to utilise one in the future!","title":"Popular frameworks"},{"location":"module-4/slides/","text":"Responsive CSS Slides CSS Responsive 1 Responsive 2","title":"Responsive CSS Slides"},{"location":"module-4/slides/#responsive-css-slides","text":"","title":"Responsive CSS Slides"},{"location":"module-4/slides/#css","text":"Responsive 1 Responsive 2","title":"CSS"}]}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Unit content for 11056, Front-end Web Design. WIT, 2019. Please make sure you refer to Canvas for further information. Introduction The week 1 lecture provides an introduction to the unit. Make sure you watch it and ensure you understand the unit structure and assessment item requirements. If you have any questions, use the discussion forums or email your tutor. Slides Lecture recording available on Canvas Modules Module 1: HTML5 and CSS Module 2: Responsive Web Design Module 3: Accessibility and Usability Software you will need A code editor. Anything you like. I'll use Brackets in class. Free for both PC and Mac GitHub Desktop . Free for both Mac and PC. You need to create a GitHub account first. Resources Canvas Canvas login: http://uclearn.canberra.edu.au Links Slides created with RevealJS This site generated by GitHub pages","title":"Home"},{"location":"#introduction","text":"The week 1 lecture provides an introduction to the unit. Make sure you watch it and ensure you understand the unit structure and assessment item requirements. If you have any questions, use the discussion forums or email your tutor. Slides Lecture recording available on Canvas","title":"Introduction"},{"location":"#modules","text":"Module 1: HTML5 and CSS Module 2: Responsive Web Design Module 3: Accessibility and Usability","title":"Modules"},{"location":"#software-you-will-need","text":"A code editor. Anything you like. I'll use Brackets in class. Free for both PC and Mac GitHub Desktop . Free for both Mac and PC. You need to create a GitHub account first.","title":"Software you will need"},{"location":"#resources","text":"","title":"Resources"},{"location":"#canvas","text":"Canvas login: http://uclearn.canberra.edu.au","title":"Canvas"},{"location":"#links","text":"Slides created with RevealJS This site generated by GitHub pages","title":"Links"},{"location":"introduction/","text":"Introduction Welcome This lecture Introduction to the unit Assessment items Important things you need to know Teaching Staff Me! Dr Ben Ennis Butler : unit convenor and tutor Email: ben.ennis.butler@canberra.edu.au . Office 7C39. Learning Outcomes By the end of this unit, we want you to be able to: Identify and critique a range of front-end web design concepts, skills and theories; Experiment with the creation of web-based interactive interfaces using appropriate concepts and techniques; and Review and evaluate appropriate development methodologies in the creation of interactive works. How we do it You will learn how to write code (html and css) Writing code is hard and time consuming - you need to stay on top of the work We hit the ground running! We\u2019ll cover a lot of content, especially in the first few weeks. Module approach There are 4 modules: - Designing for the Web - HTML - CSS - Responsive CSS Assessment items 3 assignments Website Sketch: HTML. 15%. Due 5pm Friday, week 2 Website Sketch: CSS. 25%. Due 5pm Friday, week 5 Front-end Website Project. 60%. Due 5pm Friday, week 12 Website Sketch: HTML Content from Module 1 Basic site (no styles) Validate your code! Website Sketch: CSS Content from Module 1 Build upon the work you've done in Module 1 CSS and HTML Front-end Website Project Content from Modules 1, 2 and 3 Build, test, refine We will work on the project in-class Your responsibilities You need to check the unit outline and assessment information on Canvas to ensure you are following the brief and understand what is required of you\u2026 Extra Important! You must only submit your own code. That means: - HTML5: do not use the tag to layout content - No templates, libraries, pre-generated code, content management systems - No Bootstrap, Wix, SquareSpace etc - Pure css, no SASS Plagiarism Don\u2019t copy other people\u2019s code! There is a difference between learning from and copying other people\u2019s work That means don\u2019t just refer to W3Schools (or an online resource) and take their examples You need to demonstrate your understanding with comments in the code If you are unsure, then ask us Materials and Equipment Code Editor - Many free options available. See links on Canvas. GitHub - Free, we'll use this to host your code - Can be a bit intimidating to get start with Unit structure Lectures - This is the last F2F lecture - Traditional lecture content will be delivered in the workshops Workshops - Not recorded - We will work on parts of the assessment items in the workshops Front-end Web What is it? Core languages - HTML: Hyper Text Markup Language - CSS: Cascading Style Sheets The End. Questions?","title":"Index"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#welcome","text":"","title":"Welcome"},{"location":"introduction/#this-lecture","text":"Introduction to the unit Assessment items Important things you need to know","title":"This lecture"},{"location":"introduction/#teaching-staff","text":"Me! Dr Ben Ennis Butler : unit convenor and tutor Email: ben.ennis.butler@canberra.edu.au . Office 7C39.","title":"Teaching Staff"},{"location":"introduction/#learning-outcomes","text":"By the end of this unit, we want you to be able to: Identify and critique a range of front-end web design concepts, skills and theories; Experiment with the creation of web-based interactive interfaces using appropriate concepts and techniques; and Review and evaluate appropriate development methodologies in the creation of interactive works.","title":"Learning Outcomes"},{"location":"introduction/#how-we-do-it","text":"You will learn how to write code (html and css) Writing code is hard and time consuming - you need to stay on top of the work We hit the ground running! We\u2019ll cover a lot of content, especially in the first few weeks.","title":"How we do it"},{"location":"introduction/#module-approach","text":"There are 4 modules: - Designing for the Web - HTML - CSS - Responsive CSS","title":"Module approach"},{"location":"introduction/#assessment-items","text":"","title":"Assessment items"},{"location":"introduction/#3-assignments","text":"Website Sketch: HTML. 15%. Due 5pm Friday, week 2 Website Sketch: CSS. 25%. Due 5pm Friday, week 5 Front-end Website Project. 60%. Due 5pm Friday, week 12","title":"3 assignments"},{"location":"introduction/#website-sketch-html","text":"Content from Module 1 Basic site (no styles) Validate your code!","title":"Website Sketch: HTML"},{"location":"introduction/#website-sketch-css","text":"Content from Module 1 Build upon the work you've done in Module 1 CSS and HTML","title":"Website Sketch: CSS"},{"location":"introduction/#front-end-website-project","text":"Content from Modules 1, 2 and 3 Build, test, refine We will work on the project in-class","title":"Front-end Website Project"},{"location":"introduction/#your-responsibilities","text":"You need to check the unit outline and assessment information on Canvas to ensure you are following the brief and understand what is required of you\u2026","title":"Your responsibilities"},{"location":"introduction/#extra-important","text":"You must only submit your own code. That means: - HTML5: do not use the tag to layout content - No templates, libraries, pre-generated code, content management systems - No Bootstrap, Wix, SquareSpace etc - Pure css, no SASS","title":"Extra Important!"},{"location":"introduction/#plagiarism","text":"Don\u2019t copy other people\u2019s code! There is a difference between learning from and copying other people\u2019s work That means don\u2019t just refer to W3Schools (or an online resource) and take their examples You need to demonstrate your understanding with comments in the code If you are unsure, then ask us","title":"Plagiarism"},{"location":"introduction/#materials-and-equipment","text":"Code Editor - Many free options available. See links on Canvas. GitHub - Free, we'll use this to host your code - Can be a bit intimidating to get start with","title":"Materials and Equipment"},{"location":"introduction/#unit-structure","text":"Lectures - This is the last F2F lecture - Traditional lecture content will be delivered in the workshops Workshops - Not recorded - We will work on parts of the assessment items in the workshops","title":"Unit structure"},{"location":"introduction/#front-end-web","text":"What is it? Core languages - HTML: Hyper Text Markup Language - CSS: Cascading Style Sheets","title":"Front-end Web"},{"location":"introduction/#the-end","text":"Questions?","title":"The End."},{"location":"lib/reveal/","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Instructions Markup Here's a barebones example of a fully working reveal.js presentation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < html > < head > < link rel = \"stylesheet\" href = \"css/reveal.css\" > < link rel = \"stylesheet\" href = \"css/theme/white.css\" > </ head > < body > < div class = \"reveal\" > < div class = \"slides\" > < section > Slide 1 </ section > < section > Slide 2 </ section > </ div > </ div > < script src = \"js/reveal.js\" ></ script > < script > Reveal . initialize (); </ script > </ body > </ html > The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: 1 2 3 4 5 6 7 8 9 < div class = \"reveal\" > < div class = \"slides\" > < section > Single Horizontal Slide </ section > < section > < section > Vertical Slide 1 </ section > < section > Vertical Slide 2 </ section > </ section > </ div > </ div > Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). 1 2 3 4 5 6 7 < section data-markdown > < textarea data-template > ## Page title A paragraph with some text and a [link](http://hakim.se). </ textarea > </ section > External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: 1 2 3 4 5 6 7 8 9 10 < section data-markdown = \"example.md\" data-separator = \"^\\n\\n\\n\" data-separator-vertical = \"^\\n\\n\" data-separator-notes = \"^Note:\" data-charset = \"iso-8859-15\" > <!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --> </ section > Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. 1 2 3 4 5 6 < section data-markdown > < script type = \"text/template\" > - Item 1 <!-- . element : class = \"fragment\" data - fragment - index = \"2\" --> - Item 2 <!-- . element : class = \"fragment\" data - fragment - index = \"1\" --> </ script > </ section > Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown. 1 2 3 4 5 6 < section data-markdown > < script type = \"text/template\" > <!-- . slide : data - background = \"#ff0000\" --> Markdown content </ script > </ section > Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : 1 2 3 4 5 6 7 Reveal . initialize ({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown : { smartypants : true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 Reveal . initialize ({ // Display presentation control arrows controls : true , // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial : true , // Determines where controls appear, \"edges\" or \"bottom-right\" controlsLayout : 'bottom-right' , // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\" // or \"visible\" controlsBackArrows : 'faded' , // Display a presentation progress bar progress : true , // Display the page number of the current slide slideNumber : false , // Push each slide change to the browser history history : false , // Enable keyboard shortcuts for navigation keyboard : true , // Enable the slide overview mode overview : true , // Vertical centering of slides center : true , // Enables touch navigation on devices with touch input touch : true , // Loop the presentation loop : false , // Change the presentation direction to be RTL rtl : false , // Randomizes the order of slides each time the presentation loads shuffle : false , // Turns fragments on and off globally fragments : true , // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL : false , // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded : false , // Flags if we should show a help overlay when the questionmark // key is pressed help : true , // Flags if speaker notes should be visible to all viewers showNotes : false , // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia : null , // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide : 0 , // Stop auto-sliding after user input autoSlideStoppable : true , // Use this method for navigation when auto-sliding autoSlideMethod : Reveal . navigateNext , // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming : 120 , // Enable slide navigation via mouse wheel mouseWheel : false , // Hides the address bar on mobile devices hideAddressBar : true , // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link // individually previewLinks : false , // Transition style transition : 'slide' , // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed : 'default' , // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition : 'fade' , // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance : 3 , // Parallax background image parallaxBackgroundImage : '' , // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" // Parallax background size parallaxBackgroundSize : '' , // CSS syntax, e.g. \"2100px 900px\" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal : null , parallaxBackgroundVertical : null , // The display mode that will be used to show slides display : 'block' }); The configuration can be updated after initialization using the configure method: 1 2 3 4 5 // Turn autoSlide off Reveal . configure ({ autoSlide : 0 }); // Start auto-sliding every 5s Reveal . configure ({ autoSlide : 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Reveal . initialize ({ // ... // The \"normal\" size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width : 960 , height : 700 , // Factor of the display size that should remain empty around the content margin : 0.1 , // Bounds for smallest/largest possible scale to apply to content minScale : 0.2 , maxScale : 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: 1 2 3 4 5 6 7 8 9 10 Reveal . initialize ({ // ... width : \"100%\" , height : \"100%\" , margin : 0 , minScale : 1 , maxScale : 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Reveal . initialize ({ dependencies : [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src : 'lib/js/classList.js' , condition : function () { return ! document . body . classList ; } }, // Interpret Markdown in <section> elements { src : 'plugin/markdown/marked.js' , condition : function () { return !! document . querySelector ( '[data-markdown]' ); } }, { src : 'plugin/markdown/markdown.js' , condition : function () { return !! document . querySelector ( '[data-markdown]' ); } }, // Syntax highlight for <code> elements { src : 'plugin/highlight/highlight.js' , async : true , callback : function () { hljs . initHighlightingOnLoad (); } }, // Zoom in and out with Alt+click { src : 'plugin/zoom-js/zoom.js' , async : true }, // Speaker notes { src : 'plugin/notes/notes.js' , async : true }, // MathJax { src : 'plugin/math/math.js' , async : true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js. Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . 1 2 3 Reveal . addEventListener ( 'ready' , function ( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: 1 2 3 4 // Slide every five seconds Reveal . configure ({ autoSlide : 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: 1 2 3 4 5 < section data-autoslide = \"2000\" > < p > After 2 seconds the first fragment will be shown. </ p > < p class = \"fragment\" data-autoslide = \"10000\" > After 10 seconds the next fragment will be shown. </ p > < p class = \"fragment\" > Now, the fragment is displayed for 2 seconds before the next slide is shown. </ p > </ section > To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: 1 2 3 4 5 6 7 Reveal . configure ({ keyboard : { 13 : 'next' , // go to the next slide when the ENTER key is pressed 27 : function () {}, // do something custom when ESC is pressed 32 : null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. 1 2 3 4 5 6 7 8 < section > < img data-src = \"image.png\" > < iframe data-src = \"http://hakim.se\" ></ iframe > < video > < source data-src = \"video.webm\" type = \"video/webm\" /> < source data-src = \"video.mp4\" type = \"video/mp4\" /> </ video > </ section > API The Reveal object exposes a JavaScript API for controlling navigation and reading state: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // Navigation Reveal . slide ( indexh , indexv , indexf ); Reveal . left (); Reveal . right (); Reveal . up (); Reveal . down (); Reveal . prev (); Reveal . next (); Reveal . prevFragment (); Reveal . nextFragment (); // Randomize the order of slides Reveal . shuffle (); // Toggle presentation states, optionally pass true/false to force on/off Reveal . toggleOverview (); Reveal . togglePause (); Reveal . toggleAutoSlide (); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal . toggleHelp (); // Change a config value at runtime Reveal . configure ({ controls : true }); // Returns the present configuration options Reveal . getConfig (); // Fetch the current scale of the presentation Reveal . getScale (); // Retrieves the previous and current slide elements Reveal . getPreviousSlide (); Reveal . getCurrentSlide (); Reveal . getIndices (); // { h: 0, v: 0, f: 0 } Reveal . getSlidePastCount (); Reveal . getProgress (); // (0 == first slide, 1 == last slide) Reveal . getSlides (); // Array of all slides Reveal . getTotalSlides (); // Total number of slides // Returns the speaker notes for the current slide Reveal . getSlideNotes (); // State checks Reveal . isFirstSlide (); Reveal . isLastSlide (); Reveal . isOverview (); Reveal . isPaused (); Reveal . isAutoSliding (); Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. 1 2 Reveal . addKeyBinding ( binding , callback ); Reveal . removeKeyBinding ( keyCode ); For example 1 2 3 4 5 6 7 8 9 10 11 12 // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal . addKeyBinding ( { keyCode : 84 , key : 'T' , description : 'Start timer' }, function () { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal . addKeyBinding ( 82 , function () { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. 1 2 3 Reveal . addEventListener ( 'slidechanged' , function ( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. 1 2 3 4 5 6 7 8 9 10 Reveal . slide ( 1 ); // we're on slide 1 var state = Reveal . getState (); Reveal . slide ( 3 ); // we're on slide 3 Reveal . setState ( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide <section> , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: 1 2 3 Reveal . addEventListener ( 'somestate' , function () { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . 1 2 3 < section data-background-color = \"#ff0000\" > < h2 > Color </ h2 > </ section > Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. 1 2 3 4 5 6 < section data-background-image = \"http://example.com/image.png\" > < h2 > Image </ h2 > </ section > < section data-background-image = \"http://example.com/image.png\" data-background-size = \"100px\" data-background-repeat = \"repeat\" > < h2 > This background image will be sized to 100px and repeated </ h2 > </ section > Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. 1 2 3 < section data-background-video = \"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted > < h2 > Video </ h2 > </ section > Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. 1 2 3 < section data-background-iframe = \"https://slides.com\" data-background-interactive > < h2 > Iframe </ h2 > </ section > Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Reveal . initialize ({ // Parallax background image parallaxBackgroundImage : '' , // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" // Parallax background size parallaxBackgroundSize : '' , // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal : 200 , parallaxBackgroundVertical : 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: 1 2 3 4 5 6 7 < section data-transition = \"zoom\" > < h2 > This slide will override the presentation transition and zoom! </ h2 > </ section > < section data-transition-speed = \"fast\" > < h2 > Choose from three transition speeds: default, fast or slow! </ h2 > </ section > You can also use different in and out transitions for the same slide: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < section data-transition = \"slide\" > The train goes on \u2026 </ section > < section data-transition = \"slide\" > and on \u2026 </ section > < section data-transition = \"slide-in fade-out\" > and stops. </ section > < section data-transition = \"fade-in slide-out\" > (Passengers entering and leaving) </ section > < section data-transition = \"slide\" > And it starts again. </ section > You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( <section id=\"some-slide\"> ): 1 2 < a href = \"#/2/2\" > Link </ a > < a href = \"#/some-slide\" > Link </ a > You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. 1 2 3 4 5 6 < a href = \"#\" class = \"navigate-left\" > < a href = \"#\" class = \"navigate-right\" > < a href = \"#\" class = \"navigate-up\" > < a href = \"#\" class = \"navigate-down\" > < a href = \"#\" class = \"navigate-prev\" > <!-- Previous vertical or horizontal slide --> < a href = \"#\" class = \"navigate-next\" > <!-- Next vertical or horizontal slide --> Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: 1 2 3 4 5 6 7 8 9 10 11 12 < section > < p class = \"fragment grow\" > grow </ p > < p class = \"fragment shrink\" > shrink </ p > < p class = \"fragment fade-out\" > fade-out </ p > < p class = \"fragment fade-up\" > fade-up (also down, left and right!) </ p > < p class = \"fragment fade-in-then-out\" > fades in, then out when we move to the next step </ p > < p class = \"fragment fade-in-then-semi-out\" > fades in, then obfuscate when we move to the next step </ p > < p class = \"fragment highlight-current-blue\" > blue only once </ p > < p class = \"fragment highlight-red\" > highlight-red </ p > < p class = \"fragment highlight-green\" > highlight-green </ p > < p class = \"fragment highlight-blue\" > highlight-blue </ p > </ section > Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. 1 2 3 4 5 < section > < span class = \"fragment fade-in\" > < span class = \"fragment fade-out\" > I'll fade in, then out </ span > </ span > </ section > The display order of fragments can be controlled using the data-fragment-index attribute. 1 2 3 4 5 < section > < p class = \"fragment\" data-fragment-index = \"3\" > Appears last </ p > < p class = \"fragment\" data-fragment-index = \"1\" > Appears first </ p > < p class = \"fragment\" data-fragment-index = \"2\" > Appears second </ p > </ section > Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. 1 2 3 4 5 6 Reveal . addEventListener ( 'fragmentshown' , function ( event ) { // event.fragment = the fragment DOM element } ); Reveal . addEventListener ( 'fragmenthidden' , function ( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). 1 2 3 4 5 6 Reveal . initialize ({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies : [ { src : 'plugin/highlight/highlight.js' , async : true , callback : function () { hljs . initHighlightingOnLoad (); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element. 1 2 3 4 5 6 7 8 9 < section > < pre >< code data-trim data-noescape > (def lazy-fib (concat [0 1] < mark > ((fn rfib [a b] </ mark > (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) </ code ></ pre > </ section > Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Shows the slide number using default formatting Reveal . configure ({ slideNumber : true }); // Slide number formatting can be configured using these variables: // \"h.v\": horizontal . vertical slide number (default) // \"h/v\": horizontal / vertical slide number // \"c\": flattened slide number // \"c/t\": flattened slide number / total slides Reveal . configure ({ slideNumber : 'c/t' }); // Control which views the slide number displays on using the \"showSlideNumber\" value: // \"all\": show on all views (default) // \"speaker\": only show slide numbers on speaker notes view // \"print\": only show slide numbers when printing to PDF Reveal . configure ({ showSlideNumber : 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: 1 2 3 4 5 Reveal . addEventListener ( 'overviewshown' , function ( event ) { /* ... */ } ); Reveal . addEventListener ( 'overviewhidden' , function ( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal . toggleOverview (); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: 1 < video data-autoplay src = \"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" ></ video > If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 <video> / <audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: 1 2 3 4 < section > < h2 > This video will use up the remaining space on the slide </ h2 > < video class = \"stretch\" src = \"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" ></ video > </ section > Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: 1 < window > . postMessage ( JSON . stringify ({ method : 'slide' , args : [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: 1 2 3 4 5 6 window . addEventListener ( 'message' , function ( event ) { var data = JSON . parse ( event . data ); if ( data . namespace === 'reveal' && data . eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. 1 2 3 4 5 6 7 8 9 Reveal . initialize ({ // ... // Exposes the reveal.js API through window.postMessage postMessage : true , // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents : false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: 1 2 3 4 5 6 7 < script > var link = document . createElement ( 'link' ); link . rel = 'stylesheet' ; link . type = 'text/css' ; link . href = window . location . search . match ( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css' ; document . getElementsByTagName ( 'head' )[ 0 ]. appendChild ( link ); </ script > Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: 1 < link rel = \"stylesheet\" href = \"css/theme/black.css\" id = \"theme\" > If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=\"Something important\"></section> . When used locally, this feature requires that reveal.js runs from a local web server . 1 2 3 4 5 6 7 < section > < h2 > Some Slide </ h2 > < aside class = \"notes\" > Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). </ aside > </ section > If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: 1 2 3 4 5 6 7 8 9 < section data-markdown = \"example.md\" data-separator = \"^\\n\\n\\n\" data-separator-vertical = \"^\\n\\n\" data-separator-notes = \"^Note:\" ></ section > # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide <section> by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: 1 2 3 4 5 6 7 8 Reveal . initialize ({ // ... dependencies : [ { src : 'socket.io/socket.io.js' , async : true }, { src : 'plugin/notes-server/client.js' , async : true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : '13652805320794272084' , // Obtained from the socket.io server. Gives this (the master) control of the presentation id : '1ea875674b17ca76' , // Obtained from socket.io server url : 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/master.js' , async : true }, // and if you want speaker notes { src : 'plugin/notes-server/client.js' , async : true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : null , // null so the clients do not have control of the master presentation id : '1ea875674b17ca76' , // id, obtained from socket.io server url : 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/client.js' , async : true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : null , // null so the clients do not have control of the master presentation id : '1ea875674b17ca76' , // id, obtained from socket.io server url : 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/client.js' , async : true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : '13652805320794272084' , // Obtained from the socket.io server. Gives this (the master) control of the presentation id : '1ea875674b17ca76' , // Obtained from socket.io server url : 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/master.js' , async : true }, { src : 'plugin/multiplex/client.js' , async : true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. 1 2 3 4 5 6 7 8 9 10 11 12 Reveal . initialize ({ // other options ... math : { mathjax : 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js' , config : 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies : [ { src : 'plugin/math/math.js' , async : true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"lib/reveal/#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"lib/reveal/#table-of-contents","text":"Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License","title":"Table of contents"},{"location":"lib/reveal/#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"lib/reveal/#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"lib/reveal/#instructions","text":"","title":"Instructions"},{"location":"lib/reveal/#markup","text":"Here's a barebones example of a fully working reveal.js presentation: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 < html > < head > < link rel = \"stylesheet\" href = \"css/reveal.css\" > < link rel = \"stylesheet\" href = \"css/theme/white.css\" > </ head > < body > < div class = \"reveal\" > < div class = \"slides\" > < section > Slide 1 </ section > < section > Slide 2 </ section > </ div > </ div > < script src = \"js/reveal.js\" ></ script > < script > Reveal . initialize (); </ script > </ body > </ html > The presentation markup hierarchy needs to be .reveal > .slides > section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: 1 2 3 4 5 6 7 8 9 < div class = \"reveal\" > < div class = \"slides\" > < section > Single Horizontal Slide </ section > < section > < section > Vertical Slide 1 </ section > < section > Vertical Slide 2 </ section > </ section > </ div > </ div >","title":"Markup"},{"location":"lib/reveal/#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your <section> elements and wrap the contents in a <textarea data-template> like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). 1 2 3 4 5 6 7 < section data-markdown > < textarea data-template > ## Page title A paragraph with some text and a [link](http://hakim.se). </ textarea > </ section >","title":"Markdown"},{"location":"lib/reveal/#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: 1 2 3 4 5 6 7 8 9 10 < section data-markdown = \"example.md\" data-separator = \"^\\n\\n\\n\" data-separator-vertical = \"^\\n\\n\" data-separator-notes = \"^Note:\" data-charset = \"iso-8859-15\" > <!-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. --> </ section >","title":"External Markdown"},{"location":"lib/reveal/#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. 1 2 3 4 5 6 < section data-markdown > < script type = \"text/template\" > - Item 1 <!-- . element : class = \"fragment\" data - fragment - index = \"2\" --> - Item 2 <!-- . element : class = \"fragment\" data - fragment - index = \"1\" --> </ script > </ section >","title":"Element Attributes"},{"location":"lib/reveal/#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide <section> elements generated by your Markdown. 1 2 3 4 5 6 < section data-markdown > < script type = \"text/template\" > <!-- . slide : data - background = \"#ff0000\" --> Markdown content </ script > </ section >","title":"Slide Attributes"},{"location":"lib/reveal/#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : 1 2 3 4 5 6 7 Reveal . initialize ({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown : { smartypants : true } });","title":"Configuring marked"},{"location":"lib/reveal/#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 Reveal . initialize ({ // Display presentation control arrows controls : true , // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial : true , // Determines where controls appear, \"edges\" or \"bottom-right\" controlsLayout : 'bottom-right' , // Visibility rule for backwards navigation arrows; \"faded\", \"hidden\" // or \"visible\" controlsBackArrows : 'faded' , // Display a presentation progress bar progress : true , // Display the page number of the current slide slideNumber : false , // Push each slide change to the browser history history : false , // Enable keyboard shortcuts for navigation keyboard : true , // Enable the slide overview mode overview : true , // Vertical centering of slides center : true , // Enables touch navigation on devices with touch input touch : true , // Loop the presentation loop : false , // Change the presentation direction to be RTL rtl : false , // Randomizes the order of slides each time the presentation loads shuffle : false , // Turns fragments on and off globally fragments : true , // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL : false , // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded : false , // Flags if we should show a help overlay when the questionmark // key is pressed help : true , // Flags if speaker notes should be visible to all viewers showNotes : false , // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia : null , // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide : 0 , // Stop auto-sliding after user input autoSlideStoppable : true , // Use this method for navigation when auto-sliding autoSlideMethod : Reveal . navigateNext , // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming : 120 , // Enable slide navigation via mouse wheel mouseWheel : false , // Hides the address bar on mobile devices hideAddressBar : true , // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link=\"false\"` to customise each link // individually previewLinks : false , // Transition style transition : 'slide' , // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed : 'default' , // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition : 'fade' , // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance : 3 , // Parallax background image parallaxBackgroundImage : '' , // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\" // Parallax background size parallaxBackgroundSize : '' , // CSS syntax, e.g. \"2100px 900px\" // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal : null , parallaxBackgroundVertical : null , // The display mode that will be used to show slides display : 'block' }); The configuration can be updated after initialization using the configure method: 1 2 3 4 5 // Turn autoSlide off Reveal . configure ({ autoSlide : 0 }); // Start auto-sliding every 5s Reveal . configure ({ autoSlide : 5000 });","title":"Configuration"},{"location":"lib/reveal/#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Reveal . initialize ({ // ... // The \"normal\" size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width : 960 , height : 700 , // Factor of the display size that should remain empty around the content margin : 0.1 , // Bounds for smallest/largest possible scale to apply to content minScale : 0.2 , maxScale : 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: 1 2 3 4 5 6 7 8 9 10 Reveal . initialize ({ // ... width : \"100%\" , height : \"100%\" , margin : 0 , minScale : 1 , maxScale : 1 });","title":"Presentation Size"},{"location":"lib/reveal/#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Reveal . initialize ({ dependencies : [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src : 'lib/js/classList.js' , condition : function () { return ! document . body . classList ; } }, // Interpret Markdown in <section> elements { src : 'plugin/markdown/marked.js' , condition : function () { return !! document . querySelector ( '[data-markdown]' ); } }, { src : 'plugin/markdown/markdown.js' , condition : function () { return !! document . querySelector ( '[data-markdown]' ); } }, // Syntax highlight for <code> elements { src : 'plugin/highlight/highlight.js' , async : true , callback : function () { hljs . initHighlightingOnLoad (); } }, // Zoom in and out with Alt+click { src : 'plugin/zoom-js/zoom.js' , async : true }, // Speaker notes { src : 'plugin/notes/notes.js' , async : true }, // MathJax { src : 'plugin/math/math.js' , async : true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js.","title":"Dependencies"},{"location":"lib/reveal/#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . 1 2 3 Reveal . addEventListener ( 'ready' , function ( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"lib/reveal/#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: 1 2 3 4 // Slide every five seconds Reveal . configure ({ autoSlide : 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: 1 2 3 4 5 < section data-autoslide = \"2000\" > < p > After 2 seconds the first fragment will be shown. </ p > < p class = \"fragment\" data-autoslide = \"10000\" > After 10 seconds the next fragment will be shown. </ p > < p class = \"fragment\" > Now, the fragment is displayed for 2 seconds before the next slide is shown. </ p > </ section > To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"lib/reveal/#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: 1 2 3 4 5 6 7 Reveal . configure ({ keyboard : { 13 : 'next' , // go to the next slide when the ENTER key is pressed 27 : function () {}, // do something custom when ESC is pressed 32 : null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"lib/reveal/#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"lib/reveal/#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. 1 2 3 4 5 6 7 8 < section > < img data-src = \"image.png\" > < iframe data-src = \"http://hakim.se\" ></ iframe > < video > < source data-src = \"video.webm\" type = \"video/webm\" /> < source data-src = \"video.mp4\" type = \"video/mp4\" /> </ video > </ section >","title":"Lazy Loading"},{"location":"lib/reveal/#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // Navigation Reveal . slide ( indexh , indexv , indexf ); Reveal . left (); Reveal . right (); Reveal . up (); Reveal . down (); Reveal . prev (); Reveal . next (); Reveal . prevFragment (); Reveal . nextFragment (); // Randomize the order of slides Reveal . shuffle (); // Toggle presentation states, optionally pass true/false to force on/off Reveal . toggleOverview (); Reveal . togglePause (); Reveal . toggleAutoSlide (); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal . toggleHelp (); // Change a config value at runtime Reveal . configure ({ controls : true }); // Returns the present configuration options Reveal . getConfig (); // Fetch the current scale of the presentation Reveal . getScale (); // Retrieves the previous and current slide elements Reveal . getPreviousSlide (); Reveal . getCurrentSlide (); Reveal . getIndices (); // { h: 0, v: 0, f: 0 } Reveal . getSlidePastCount (); Reveal . getProgress (); // (0 == first slide, 1 == last slide) Reveal . getSlides (); // Array of all slides Reveal . getTotalSlides (); // Total number of slides // Returns the speaker notes for the current slide Reveal . getSlideNotes (); // State checks Reveal . isFirstSlide (); Reveal . isLastSlide (); Reveal . isOverview (); Reveal . isPaused (); Reveal . isAutoSliding ();","title":"API"},{"location":"lib/reveal/#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. 1 2 Reveal . addKeyBinding ( binding , callback ); Reveal . removeKeyBinding ( keyCode ); For example 1 2 3 4 5 6 7 8 9 10 11 12 // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal . addKeyBinding ( { keyCode : 84 , key : 'T' , description : 'Start timer' }, function () { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal . addKeyBinding ( 82 , function () { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"lib/reveal/#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. 1 2 3 Reveal . addEventListener ( 'slidechanged' , function ( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"lib/reveal/#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. 1 2 3 4 5 6 7 8 9 10 Reveal . slide ( 1 ); // we're on slide 1 var state = Reveal . getState (); Reveal . slide ( 3 ); // we're on slide 3 Reveal . setState ( state ); // we're back on slide 1","title":"Presentation State"},{"location":"lib/reveal/#slide-states","text":"If you set data-state=\"somestate\" on a slide <section> , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: 1 2 3 Reveal . addEventListener ( 'somestate' , function () { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"lib/reveal/#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your <section> elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"lib/reveal/#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . 1 2 3 < section data-background-color = \"#ff0000\" > < h2 > Color </ h2 > </ section >","title":"Color Backgrounds"},{"location":"lib/reveal/#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. 1 2 3 4 5 6 < section data-background-image = \"http://example.com/image.png\" > < h2 > Image </ h2 > </ section > < section data-background-image = \"http://example.com/image.png\" data-background-size = \"100px\" data-background-repeat = \"repeat\" > < h2 > This background image will be sized to 100px and repeated </ h2 > </ section >","title":"Image Backgrounds"},{"location":"lib/reveal/#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. 1 2 3 < section data-background-video = \"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop data-background-video-muted > < h2 > Video </ h2 > </ section >","title":"Video Backgrounds"},{"location":"lib/reveal/#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. 1 2 3 < section data-background-iframe = \"https://slides.com\" data-background-interactive > < h2 > Iframe </ h2 > </ section >","title":"Iframe Backgrounds"},{"location":"lib/reveal/#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"lib/reveal/#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Reveal . initialize ({ // Parallax background image parallaxBackgroundImage : '' , // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\" // Parallax background size parallaxBackgroundSize : '' , // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal : 200 , parallaxBackgroundVertical : 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"lib/reveal/#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: 1 2 3 4 5 6 7 < section data-transition = \"zoom\" > < h2 > This slide will override the presentation transition and zoom! </ h2 > </ section > < section data-transition-speed = \"fast\" > < h2 > Choose from three transition speeds: default, fast or slow! </ h2 > </ section > You can also use different in and out transitions for the same slide: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < section data-transition = \"slide\" > The train goes on \u2026 </ section > < section data-transition = \"slide\" > and on \u2026 </ section > < section data-transition = \"slide-in fade-out\" > and stops. </ section > < section data-transition = \"fade-in slide-out\" > (Passengers entering and leaving) </ section > < section data-transition = \"slide\" > And it starts again. </ section > You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"lib/reveal/#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( <section id=\"some-slide\"> ): 1 2 < a href = \"#/2/2\" > Link </ a > < a href = \"#/some-slide\" > Link </ a > You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. 1 2 3 4 5 6 < a href = \"#\" class = \"navigate-left\" > < a href = \"#\" class = \"navigate-right\" > < a href = \"#\" class = \"navigate-up\" > < a href = \"#\" class = \"navigate-down\" > < a href = \"#\" class = \"navigate-prev\" > <!-- Previous vertical or horizontal slide --> < a href = \"#\" class = \"navigate-next\" > <!-- Next vertical or horizontal slide -->","title":"Internal links"},{"location":"lib/reveal/#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: 1 2 3 4 5 6 7 8 9 10 11 12 < section > < p class = \"fragment grow\" > grow </ p > < p class = \"fragment shrink\" > shrink </ p > < p class = \"fragment fade-out\" > fade-out </ p > < p class = \"fragment fade-up\" > fade-up (also down, left and right!) </ p > < p class = \"fragment fade-in-then-out\" > fades in, then out when we move to the next step </ p > < p class = \"fragment fade-in-then-semi-out\" > fades in, then obfuscate when we move to the next step </ p > < p class = \"fragment highlight-current-blue\" > blue only once </ p > < p class = \"fragment highlight-red\" > highlight-red </ p > < p class = \"fragment highlight-green\" > highlight-green </ p > < p class = \"fragment highlight-blue\" > highlight-blue </ p > </ section > Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. 1 2 3 4 5 < section > < span class = \"fragment fade-in\" > < span class = \"fragment fade-out\" > I'll fade in, then out </ span > </ span > </ section > The display order of fragments can be controlled using the data-fragment-index attribute. 1 2 3 4 5 < section > < p class = \"fragment\" data-fragment-index = \"3\" > Appears last </ p > < p class = \"fragment\" data-fragment-index = \"1\" > Appears first </ p > < p class = \"fragment\" data-fragment-index = \"2\" > Appears second </ p > </ section >","title":"Fragments"},{"location":"lib/reveal/#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. 1 2 3 4 5 6 Reveal . addEventListener ( 'fragmentshown' , function ( event ) { // event.fragment = the fragment DOM element } ); Reveal . addEventListener ( 'fragmenthidden' , function ( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"lib/reveal/#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). 1 2 3 4 5 6 Reveal . initialize ({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies : [ { src : 'plugin/highlight/highlight.js' , async : true , callback : function () { hljs . initHighlightingOnLoad (); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using <mark> to call out a line of code, add the data-noescape attribute to the <code> element. 1 2 3 4 5 6 7 8 9 < section > < pre >< code data-trim data-noescape > (def lazy-fib (concat [0 1] < mark > ((fn rfib [a b] </ mark > (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) </ code ></ pre > </ section >","title":"Code syntax highlighting"},{"location":"lib/reveal/#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Shows the slide number using default formatting Reveal . configure ({ slideNumber : true }); // Slide number formatting can be configured using these variables: // \"h.v\": horizontal . vertical slide number (default) // \"h/v\": horizontal / vertical slide number // \"c\": flattened slide number // \"c/t\": flattened slide number / total slides Reveal . configure ({ slideNumber : 'c/t' }); // Control which views the slide number displays on using the \"showSlideNumber\" value: // \"all\": show on all views (default) // \"speaker\": only show slide numbers on speaker notes view // \"print\": only show slide numbers when printing to PDF Reveal . configure ({ showSlideNumber : 'speaker' });","title":"Slide number"},{"location":"lib/reveal/#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: 1 2 3 4 5 Reveal . addEventListener ( 'overviewshown' , function ( event ) { /* ... */ } ); Reveal . addEventListener ( 'overviewhidden' , function ( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal . toggleOverview ();","title":"Overview mode"},{"location":"lib/reveal/#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"lib/reveal/#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: 1 < video data-autoplay src = \"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" ></ video > If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 <video> / <audio> and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"lib/reveal/#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"lib/reveal/#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: 1 2 3 4 < section > < h2 > This video will use up the remaining space on the slide </ h2 > < video class = \"stretch\" src = \"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" ></ video > </ section > Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"lib/reveal/#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: 1 < window > . postMessage ( JSON . stringify ({ method : 'slide' , args : [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: 1 2 3 4 5 6 window . addEventListener ( 'message' , function ( event ) { var data = JSON . parse ( event . data ); if ( data . namespace === 'reveal' && data . eventName === 'slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. 1 2 3 4 5 6 7 8 9 Reveal . initialize ({ // ... // Exposes the reveal.js API through window.postMessage postMessage : true , // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents : false });","title":"postMessage API"},{"location":"lib/reveal/#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"lib/reveal/#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"lib/reveal/#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"lib/reveal/#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: 1 2 3 4 5 6 7 < script > var link = document . createElement ( 'link' ); link . rel = 'stylesheet' ; link . type = 'text/css' ; link . href = window . location . search . match ( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css' ; document . getElementsByTagName ( 'head' )[ 0 ]. appendChild ( link ); </ script >","title":"Print stylesheet"},{"location":"lib/reveal/#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf&showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"lib/reveal/#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js < 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: 1 < link rel = \"stylesheet\" href = \"css/theme/black.css\" id = \"theme\" > If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"lib/reveal/#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an <aside> element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like <section data-notes=\"Something important\"></section> . When used locally, this feature requires that reveal.js runs from a local web server . 1 2 3 4 5 6 7 < section > < h2 > Some Slide </ h2 > < aside class = \"notes\" > Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). </ aside > </ section > If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: 1 2 3 4 5 6 7 8 9 < section data-markdown = \"example.md\" data-separator = \"^\\n\\n\\n\" data-separator-vertical = \"^\\n\\n\" data-separator-notes = \"^Note:\" ></ section > # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"lib/reveal/#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"lib/reveal/#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide <section> by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"lib/reveal/#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: 1 2 3 4 5 6 7 8 Reveal . initialize ({ // ... dependencies : [ { src : 'socket.io/socket.io.js' , async : true }, { src : 'plugin/notes-server/client.js' , async : true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"lib/reveal/#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"lib/reveal/#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : '13652805320794272084' , // Obtained from the socket.io server. Gives this (the master) control of the presentation id : '1ea875674b17ca76' , // Obtained from socket.io server url : 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/master.js' , async : true }, // and if you want speaker notes { src : 'plugin/notes-server/client.js' , async : true } // other dependencies... ] });","title":"Master presentation"},{"location":"lib/reveal/#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : null , // null so the clients do not have control of the master presentation id : '1ea875674b17ca76' , // id, obtained from socket.io server url : 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/client.js' , async : true } // other dependencies... ] });","title":"Client presentation"},{"location":"lib/reveal/#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"lib/reveal/#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : null , // null so the clients do not have control of the master presentation id : '1ea875674b17ca76' , // id, obtained from socket.io server url : 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/client.js' , async : true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Reveal . initialize ({ // other options... multiplex : { // Example values. To generate your own, see the socket.io server instructions. secret : '13652805320794272084' , // Obtained from the socket.io server. Gives this (the master) control of the presentation id : '1ea875674b17ca76' , // Obtained from socket.io server url : 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies : [ { src : '//cdn.socket.io/socket.io-1.3.5.js' , async : true }, { src : 'plugin/multiplex/master.js' , async : true }, { src : 'plugin/multiplex/client.js' , async : true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"lib/reveal/#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. 1 2 3 4 5 6 7 8 9 10 11 12 Reveal . initialize ({ // other options ... math : { mathjax : 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js' , config : 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies : [ { src : 'plugin/math/math.js' , async : true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"lib/reveal/#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"lib/reveal/#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"lib/reveal/#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"lib/reveal/#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"lib/reveal/#license","text":"MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"lib/reveal/CONTRIBUTING/","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"lib/reveal/CONTRIBUTING/#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"lib/reveal/CONTRIBUTING/#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"lib/reveal/CONTRIBUTING/#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"lib/reveal/CONTRIBUTING/#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"lib/reveal/CONTRIBUTING/#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"lib/reveal/css/theme/","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Index"},{"location":"lib/reveal/css/theme/#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"lib/reveal/css/theme/#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"lib/reveal/plugin/markdown/example/","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"lib/reveal/plugin/markdown/example/#markdown-demo","text":"","title":"Markdown Demo"},{"location":"lib/reveal/plugin/markdown/example/#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"lib/reveal/plugin/markdown/example/#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"lib/reveal/plugin/markdown/example/#external-2","text":"Content 2.1","title":"External 2"},{"location":"lib/reveal/plugin/markdown/example/#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"lib/reveal/plugin/markdown/example/#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"lib/reveal/plugin/markdown/example/#external-33","text":"","title":"External 3.3"},{"location":"lib/reveal/test/simple/","text":"Slide 1.1 1 var a = 1 ; Slide 1.2 Slide 2","title":"Simple"},{"location":"lib/reveal/test/simple/#slide-11","text":"1 var a = 1 ;","title":"Slide 1.1"},{"location":"lib/reveal/test/simple/#slide-12","text":"","title":"Slide 1.2"},{"location":"lib/reveal/test/simple/#slide-2","text":"","title":"Slide 2"},{"location":"module-1/","text":"Module 1: Designing for the Web Workshops are not recorded. This module This module will introduce you to the basics of designing for the Web. You will learn how to: look for inspiration online understand web conventions think about how to structure a website Module Content","title":"Module 1: Designing for the Web"},{"location":"module-1/#module-1-designing-for-the-web","text":"Workshops are not recorded.","title":"Module 1: Designing for the Web"},{"location":"module-1/#this-module","text":"This module will introduce you to the basics of designing for the Web. You will learn how to: look for inspiration online understand web conventions think about how to structure a website","title":"This module"},{"location":"module-1/#module-content","text":"","title":"Module Content"},{"location":"module-2/","text":"Module 2: HTML5 Workshops are not recorded. This module This module will introduce you to the joys of HTML. You will learn how to: structure a HTML5 document understand the components of semantic HTML write semantic HTML Module Content HTML Introduction to the Web Software and setting up your site Coding Introduction Writing a basic page with semantic HTML Navigation Validation Slides The information on the pages above is also available as slides (generally used for presentation in class) here . Additional Resources One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Module 2: HTML5"},{"location":"module-2/#module-2-html5","text":"Workshops are not recorded.","title":"Module 2: HTML5"},{"location":"module-2/#this-module","text":"This module will introduce you to the joys of HTML. You will learn how to: structure a HTML5 document understand the components of semantic HTML write semantic HTML","title":"This module"},{"location":"module-2/#module-content","text":"","title":"Module Content"},{"location":"module-2/#html","text":"Introduction to the Web Software and setting up your site Coding Introduction Writing a basic page with semantic HTML Navigation Validation","title":"HTML"},{"location":"module-2/#slides","text":"The information on the pages above is also available as slides (generally used for presentation in class) here .","title":"Slides"},{"location":"module-2/#additional-resources","text":"One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Additional Resources"},{"location":"module-2/common-tags/","text":"It is likely that you will only need a small selection of HTML tags to markup your content. A full listing of HTML tags, with definitions and examples, can be found here: Mozilla HTML tag reference Here are some of the more common tags and links to further information: Common tags for sections of content header main footer aside section article div > (wherever possible use a meaningful tag rather than div Common content tags <h1><h2><h3><h4><h5><h6> <p> <nav> <blockquote > <a href=\"http://canberra.edu.au\" > <img src=\"images/logo.png\" alt=\"image description > Lists & groups of items Unordered list Ordered list Tabular data (only) Note that if you use the table tag to layout content then you will be marked down significantly. < table > Form elements Text input field Text field for search strings. \"placeholder\" is the placeholder text to display inside the empty field. Text field for telephone number Text field for email address Text field for password A push button. The \"value\" text appears on the button. A checkbox Comments To include a comment in your HTML document, use the following: Be aware that a CSS comment looks different to a HTML comment. You cannot include a HTML comment in your CSS or a CSS comment in your HTML document.","title":"Common tags"},{"location":"module-2/common-tags/#common-tags-for-sections-of-content","text":"header main footer aside section article div > (wherever possible use a meaningful tag rather than div","title":"Common tags for sections of content"},{"location":"module-2/common-tags/#common-content-tags","text":"<h1><h2><h3><h4><h5><h6> <p> <nav> <blockquote > <a href=\"http://canberra.edu.au\" > <img src=\"images/logo.png\" alt=\"image description >","title":"Common content tags"},{"location":"module-2/common-tags/#lists-groups-of-items","text":"Unordered list Ordered list","title":"Lists &amp; groups of items"},{"location":"module-2/common-tags/#tabular-data-only","text":"Note that if you use the table tag to layout content then you will be marked down significantly. < table >","title":"Tabular data (only)"},{"location":"module-2/common-tags/#form-elements","text":"Text input field Text field for search strings. \"placeholder\" is the placeholder text to display inside the empty field. Text field for telephone number Text field for email address Text field for password A push button. The \"value\" text appears on the button. A checkbox","title":"Form elements"},{"location":"module-2/common-tags/#comments","text":"To include a comment in your HTML document, use the following: Be aware that a CSS comment looks different to a HTML comment. You cannot include a HTML comment in your CSS or a CSS comment in your HTML document.","title":"Comments"},{"location":"module-2/html-1/","text":"HTML 1: Introduction to the Web Introducion An introduction to the Web How the Web works Domains and hosting Production process Key terms (HTML and CSS) The internet and the Web Used interchangeably but not the same thing The Web is a protocol on the internet Other protocols include: - Email - FTP (file transfer protocol) - Peer-to-peer (torrent) - Domain Name System (DNS) How the Web works User enters domain Query goes to domain name system (DNS) server DNS server returns IP address IP address points to web host (server) Web host returns actual website Domains and Hosting Domains Easier to remember than a set of numbers www.google.com www : hostname google : name com : top level domain Getting a domain Anyone can get a domain, but you need to pay for it .com - can be registered for a year or more - often free with hosting .com.au - need to have an ABN to register Many more types available Hosting You pay a company to rent some space on their server They make sure their servers can: - handle traffic (bandwidth) - won\u2019t go offline Depending on your requirements, hosting can be cheap or really expensive Key terms HTML Hyper Text Markup Language Created by Tim Berners-Lee, first public version around 1991 For content - headings, paragraphs, defining images Tags already exist - you can\u2019t make them up 1 <p> This is a paragraph </p> CSS Cascading Style Sheets For appearance. First version in 1996 How to change colours, width, height etc: 1 2 3 4 p { background-color : #99cc00 ; font-size : 12 px ; } Don't combine them! HTML and CSS are independent They should not be combined So, no CSS inside a HTML document Don't use inline styles in your HTML: 1 2 3 <p style= \"background-color: #99cc00; font-size: 12px;\" > This is a paragraph </p> Production Process Common production process Design flat website Build website \u2018locally\u2019 (on your own computer) Upload to development server and test Fix any issues Deploy website to the world Suggested production process Sketching in code methodology Sketch website design on paper Start sketching in code Build website \u2018locally\u2019 Test in browser, Validate code, Fix A process of constant refinement.","title":"HTML 1: Introduction to the Web"},{"location":"module-2/html-1/#html-1-introduction-to-the-web","text":"","title":"HTML 1: Introduction to the Web"},{"location":"module-2/html-1/#introducion","text":"An introduction to the Web How the Web works Domains and hosting Production process Key terms (HTML and CSS)","title":"Introducion"},{"location":"module-2/html-1/#the-internet-and-the-web","text":"Used interchangeably but not the same thing The Web is a protocol on the internet Other protocols include: - Email - FTP (file transfer protocol) - Peer-to-peer (torrent) - Domain Name System (DNS)","title":"The internet and the Web"},{"location":"module-2/html-1/#how-the-web-works","text":"User enters domain Query goes to domain name system (DNS) server DNS server returns IP address IP address points to web host (server) Web host returns actual website","title":"How the Web works"},{"location":"module-2/html-1/#domains-and-hosting","text":"","title":"Domains and Hosting"},{"location":"module-2/html-1/#domains","text":"Easier to remember than a set of numbers www.google.com www : hostname google : name com : top level domain","title":"Domains"},{"location":"module-2/html-1/#getting-a-domain","text":"Anyone can get a domain, but you need to pay for it .com - can be registered for a year or more - often free with hosting .com.au - need to have an ABN to register Many more types available","title":"Getting a domain"},{"location":"module-2/html-1/#hosting","text":"You pay a company to rent some space on their server They make sure their servers can: - handle traffic (bandwidth) - won\u2019t go offline Depending on your requirements, hosting can be cheap or really expensive","title":"Hosting"},{"location":"module-2/html-1/#key-terms","text":"","title":"Key terms"},{"location":"module-2/html-1/#html","text":"Hyper Text Markup Language Created by Tim Berners-Lee, first public version around 1991 For content - headings, paragraphs, defining images Tags already exist - you can\u2019t make them up 1 <p> This is a paragraph </p>","title":"HTML"},{"location":"module-2/html-1/#css","text":"Cascading Style Sheets For appearance. First version in 1996 How to change colours, width, height etc: 1 2 3 4 p { background-color : #99cc00 ; font-size : 12 px ; }","title":"CSS"},{"location":"module-2/html-1/#dont-combine-them","text":"HTML and CSS are independent They should not be combined So, no CSS inside a HTML document Don't use inline styles in your HTML: 1 2 3 <p style= \"background-color: #99cc00; font-size: 12px;\" > This is a paragraph </p>","title":"Don't combine them!"},{"location":"module-2/html-1/#production-process","text":"","title":"Production Process"},{"location":"module-2/html-1/#common-production-process","text":"Design flat website Build website \u2018locally\u2019 (on your own computer) Upload to development server and test Fix any issues Deploy website to the world","title":"Common production process"},{"location":"module-2/html-1/#suggested-production-process","text":"Sketching in code methodology Sketch website design on paper Start sketching in code Build website \u2018locally\u2019 Test in browser, Validate code, Fix A process of constant refinement.","title":"Suggested production process"},{"location":"module-2/html-2/","text":"HTML 2: Site Setup, coding software Site setup Introduction Setting up your workspace Getting file names right Signing up to GitHub Workspace setup It is crucial to get the initial setup right Need to be aware of folder structure Helpful if you already know the page structure Info Errors in the folder structure and file names are the number 1 reason students fail the final assignment Folders Create a folder for your site - Save everything inside that folder - Do not move the files around - you will break the links if you do - Put the assets (images, CSS file) in subfolders to help you organise - All HTML files should be in the root folder You need to use the required folder structure for your projects Required folder structure Root directory is the top-level folder - I.e. the folder that contains any sub-folders - All HTML files MUST be in the root directory Inside the root directory, you will have an assets folder it will contain at least two extra folders: - One for your CSS - One for your images Case sensitive The web is case sensitive That means: ALL folder and filenames must match - assets/Images and assets/images are not the same Keep folder and filenames in lowercase for simplicity File names As before, Errors in the folder structure and file names are the number 1 reason students fail the final assignment Get it right at the beginning File name rules There are some rules on the web that you must follow If you don\u2019t, your website won\u2019t work online There are some exceptions, but for this project we have certain requirements, make sure you know what they are... Rule 1: lowercase All filenames must be in lowercase On the Web, mypage.html is different to Mypage.html Rule 2: no spaces There cannot be any spaces in filenames (or folders) If the filename was my page.html and in the code you linked to the file as mypage.html it would not load Rule 3: default naming The homepage must be called index.html Regardless of what you want to call the first page of your website, the filename must be index.html Not: homepage.html, default.html or anything else Rules All filenames must be in lowercase There cannot be any spaces in filenames (or folders) The homepage must be called index.html File location HTML files must be in the root folder CSS file to go in assets > css All images in assets > images This might seem overly specific now, but small mistakes at this stage can cause huge issues later. GitHub GitHub We will use GitHub as a code repository Please signup to GitHub (it's free): github.com Coding Software Introduction Will briefly discuss various coding tools and their pros and cons A note about editors HTML and CSS are just plain text That means: - You can open the files in any text editor - There are no compatibility issues between programs - You do not need to pay for a program Many Options There are many, many different tools available All have different strengths and weaknesses No need to pay - the free tools are often better We will discuss: - Dreamweaver, Coda, Brackets, Sublime and Notepad Features you want Code hinting Colour coding Auto completion Dreamweaver Pros - Lots of features - Colour coding and autocompletion Cons - Paid and only available as part of Adobe CC - Tendency for students to get stuck using \u2018design\u2019 mode rather than \u2018code\u2019 view Coda Pros - Lots of features - Built in browser - Colour coding/autocompletion - Built in FTP for uploading to web Cons - Costs ~ $100 usd - Mac only Sublime Pros - Free - Super fast Cons - Mac only - Overly simpilistic for first-time coders Notepad (PC)/ TextEdit (Mac) Pros - Free - Plain text editors Cons - No colour coding or autocompletion = increases chance of mistakes in code Brackets Pros - Free - Great extensions - Super fast Cons - ? What should I use? Good question! We will use Brackets in the workshops You can use whatever you like, but, be careful: - if it generates code for you = fail","title":"HTML 2: Site Setup, coding software"},{"location":"module-2/html-2/#html-2-site-setup-coding-software","text":"","title":"HTML 2: Site Setup, coding software"},{"location":"module-2/html-2/#site-setup","text":"","title":"Site setup"},{"location":"module-2/html-2/#introduction","text":"Setting up your workspace Getting file names right Signing up to GitHub","title":"Introduction"},{"location":"module-2/html-2/#workspace-setup","text":"It is crucial to get the initial setup right Need to be aware of folder structure Helpful if you already know the page structure Info Errors in the folder structure and file names are the number 1 reason students fail the final assignment","title":"Workspace setup"},{"location":"module-2/html-2/#folders","text":"Create a folder for your site - Save everything inside that folder - Do not move the files around - you will break the links if you do - Put the assets (images, CSS file) in subfolders to help you organise - All HTML files should be in the root folder You need to use the required folder structure for your projects","title":"Folders"},{"location":"module-2/html-2/#required-folder-structure","text":"Root directory is the top-level folder - I.e. the folder that contains any sub-folders - All HTML files MUST be in the root directory Inside the root directory, you will have an assets folder it will contain at least two extra folders: - One for your CSS - One for your images","title":"Required folder structure"},{"location":"module-2/html-2/#case-sensitive","text":"The web is case sensitive That means: ALL folder and filenames must match - assets/Images and assets/images are not the same Keep folder and filenames in lowercase for simplicity","title":"Case sensitive"},{"location":"module-2/html-2/#file-names","text":"As before, Errors in the folder structure and file names are the number 1 reason students fail the final assignment Get it right at the beginning","title":"File names"},{"location":"module-2/html-2/#file-name-rules","text":"There are some rules on the web that you must follow If you don\u2019t, your website won\u2019t work online There are some exceptions, but for this project we have certain requirements, make sure you know what they are...","title":"File name rules"},{"location":"module-2/html-2/#rule-1-lowercase","text":"All filenames must be in lowercase On the Web, mypage.html is different to Mypage.html","title":"Rule 1: lowercase"},{"location":"module-2/html-2/#rule-2-no-spaces","text":"There cannot be any spaces in filenames (or folders) If the filename was my page.html and in the code you linked to the file as mypage.html it would not load","title":"Rule 2: no spaces"},{"location":"module-2/html-2/#rule-3-default-naming","text":"The homepage must be called index.html Regardless of what you want to call the first page of your website, the filename must be index.html Not: homepage.html, default.html or anything else","title":"Rule 3: default naming"},{"location":"module-2/html-2/#rules","text":"All filenames must be in lowercase There cannot be any spaces in filenames (or folders) The homepage must be called index.html","title":"Rules"},{"location":"module-2/html-2/#file-location","text":"HTML files must be in the root folder CSS file to go in assets > css All images in assets > images This might seem overly specific now, but small mistakes at this stage can cause huge issues later.","title":"File location"},{"location":"module-2/html-2/#github","text":"","title":"GitHub"},{"location":"module-2/html-2/#github_1","text":"We will use GitHub as a code repository Please signup to GitHub (it's free): github.com","title":"GitHub"},{"location":"module-2/html-2/#coding-software","text":"","title":"Coding Software"},{"location":"module-2/html-2/#introduction_1","text":"Will briefly discuss various coding tools and their pros and cons","title":"Introduction"},{"location":"module-2/html-2/#a-note-about-editors","text":"HTML and CSS are just plain text That means: - You can open the files in any text editor - There are no compatibility issues between programs - You do not need to pay for a program","title":"A note about editors"},{"location":"module-2/html-2/#many-options","text":"There are many, many different tools available All have different strengths and weaknesses No need to pay - the free tools are often better We will discuss: - Dreamweaver, Coda, Brackets, Sublime and Notepad","title":"Many Options"},{"location":"module-2/html-2/#features-you-want","text":"Code hinting Colour coding Auto completion","title":"Features you want"},{"location":"module-2/html-2/#dreamweaver","text":"Pros - Lots of features - Colour coding and autocompletion Cons - Paid and only available as part of Adobe CC - Tendency for students to get stuck using \u2018design\u2019 mode rather than \u2018code\u2019 view","title":"Dreamweaver"},{"location":"module-2/html-2/#coda","text":"Pros - Lots of features - Built in browser - Colour coding/autocompletion - Built in FTP for uploading to web Cons - Costs ~ $100 usd - Mac only","title":"Coda"},{"location":"module-2/html-2/#sublime","text":"Pros - Free - Super fast Cons - Mac only - Overly simpilistic for first-time coders","title":"Sublime"},{"location":"module-2/html-2/#notepad-pc-textedit-mac","text":"Pros - Free - Plain text editors Cons - No colour coding or autocompletion = increases chance of mistakes in code","title":"Notepad (PC)/ TextEdit (Mac)"},{"location":"module-2/html-2/#brackets","text":"Pros - Free - Great extensions - Super fast Cons - ?","title":"Brackets"},{"location":"module-2/html-2/#what-should-i-use","text":"Good question! We will use Brackets in the workshops You can use whatever you like, but, be careful: - if it generates code for you = fail","title":"What should I use?"},{"location":"module-2/html-3/","text":"HTML 3: Coding introduction Introduction Describe some key coding terms Outline the default HTML structure and describe how it works Key terms Elements Tags Attributes Key terms: elements Define the structure and content of objects within a page We want to write semantic HTML Using the most appropriate element for the content E.g. headings, paragraphs, nav, footer, aside Key terms: tags An element name surrounded by the less-than and greater-than angled brackets Most commonly occur in pairs They open and close Opens like: <div> Closes like: </div> What falls between is the content of a tag: 1 <div> ............ </div> Key terms: attributes Attributes are used inside a tag and provide further information about that element Can only be in the opening tag: 1 <div class= \"...\" > .... </div> Must follow the same format: attribute name equals sign quoted attribute value Key terms: attributes For example: 1 <a href= \u201dhttp://google.com\u201d > Google </a> or 1 <div id= \"col\" > .... </div> or 1 <header><h1 class= \"main\" > Site title </h1></header> Lowercase Keep your code in lowercase! Those terms again Elements The named description of the content Tags Element name wrapped in < and > Attributes Provide additional information about an element HTML structure All HTML documents have the same structure It is very specific If you put code in the wrong spot then you will have major issues when you validate the code later HTML structure Here is the basic html5 document structure: 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < head > < title ></ title > < meta charset = \"utf-8\" > </ head > < body > </ body > </ html > Let's break it down! HTML structure 1 <!DOCTYPE html> The first line of every document must declare what version of HTML you are writing This is known as the doctype declaration In HTML5 it is super short and easy to remember, previously it was much longer HTML structure 1 2 3 4 <html> </html> Following the doctype, the HTML element is declared It signifies the start of the document Don\u2019t forget to close it though, it also signifies the end of the document HTML structure 1 2 3 <head> <title></title> </head> The content within the <head> does not actually appear on the page This is where you set the title that appears in the browser Also where you will add the link to your CSS documents later Don\u2019t forget to close the tag! HTML structure 1 2 3 <body> <p> Content would go here </p> </body> All the visible content on the page must go between the <body> tags That means all text, images and layout tags Super simple page A very simple page would look like this: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > My first web page </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Hello World. </ h1 > < p > This is a basic web page. </ p > </ body > </ html > See page here .","title":"HTML 3: Coding introduction"},{"location":"module-2/html-3/#html-3-coding-introduction","text":"","title":"HTML 3: Coding introduction"},{"location":"module-2/html-3/#introduction","text":"Describe some key coding terms Outline the default HTML structure and describe how it works","title":"Introduction"},{"location":"module-2/html-3/#key-terms","text":"Elements Tags Attributes","title":"Key terms"},{"location":"module-2/html-3/#key-terms-elements","text":"Define the structure and content of objects within a page We want to write semantic HTML Using the most appropriate element for the content E.g. headings, paragraphs, nav, footer, aside","title":"Key terms: elements"},{"location":"module-2/html-3/#key-terms-tags","text":"An element name surrounded by the less-than and greater-than angled brackets Most commonly occur in pairs They open and close Opens like: <div> Closes like: </div> What falls between is the content of a tag: 1 <div> ............ </div>","title":"Key terms: tags"},{"location":"module-2/html-3/#key-terms-attributes","text":"Attributes are used inside a tag and provide further information about that element Can only be in the opening tag: 1 <div class= \"...\" > .... </div> Must follow the same format: attribute name equals sign quoted attribute value","title":"Key terms: attributes"},{"location":"module-2/html-3/#key-terms-attributes_1","text":"For example: 1 <a href= \u201dhttp://google.com\u201d > Google </a> or 1 <div id= \"col\" > .... </div> or 1 <header><h1 class= \"main\" > Site title </h1></header>","title":"Key terms: attributes"},{"location":"module-2/html-3/#lowercase","text":"Keep your code in lowercase!","title":"Lowercase"},{"location":"module-2/html-3/#those-terms-again","text":"Elements The named description of the content Tags Element name wrapped in < and > Attributes Provide additional information about an element","title":"Those terms again"},{"location":"module-2/html-3/#html-structure","text":"All HTML documents have the same structure It is very specific If you put code in the wrong spot then you will have major issues when you validate the code later","title":"HTML structure"},{"location":"module-2/html-3/#html-structure_1","text":"Here is the basic html5 document structure: 1 2 3 4 5 6 7 8 9 10 <!DOCTYPE html> < html lang = \"en\" > < head > < title ></ title > < meta charset = \"utf-8\" > </ head > < body > </ body > </ html > Let's break it down!","title":"HTML structure"},{"location":"module-2/html-3/#html-structure_2","text":"1 <!DOCTYPE html> The first line of every document must declare what version of HTML you are writing This is known as the doctype declaration In HTML5 it is super short and easy to remember, previously it was much longer","title":"HTML structure"},{"location":"module-2/html-3/#html-structure_3","text":"1 2 3 4 <html> </html> Following the doctype, the HTML element is declared It signifies the start of the document Don\u2019t forget to close it though, it also signifies the end of the document","title":"HTML structure"},{"location":"module-2/html-3/#html-structure_4","text":"1 2 3 <head> <title></title> </head> The content within the <head> does not actually appear on the page This is where you set the title that appears in the browser Also where you will add the link to your CSS documents later Don\u2019t forget to close the tag!","title":"HTML structure"},{"location":"module-2/html-3/#html-structure_5","text":"1 2 3 <body> <p> Content would go here </p> </body> All the visible content on the page must go between the <body> tags That means all text, images and layout tags","title":"HTML structure"},{"location":"module-2/html-3/#super-simple-page","text":"A very simple page would look like this: 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > My first web page </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Hello World. </ h1 > < p > This is a basic web page. </ p > </ body > </ html > See page here .","title":"Super simple page"},{"location":"module-2/html-4/","text":"HTML 4: Semantic HTML5 A Basic Page Introduction I will build a basic web page using content elements I will use Brackets And some demo content You should: follow along! Semantic HTML We will learn to write Semantic HTML Elements, attributes, and attribute values in HTML are defined to have certain meanings (semantics). For example, the ol element represents an ordered list, and the lang attribute represents the language of the content. (W3C, HTML 5.1 spec) Berners-Lee first discussed the concept in 2001. Essentially they provide meaning to the content on a HTML page, rather than just focusing on presentation. Before HTML5 the structure/layout of a page was built using the <div> tag The <div> tag has no semantic value HTML5 brought new elements for semantically defining structure: 1 < header > , < nav > , < main > , < aside > , < footer > You must use some of these tags in your website. Semantic HTML5 tags Default HTML5 structure Heading tags <h1>, <h2>, <h3>, <h4>, <h5>, <h6> Paragraphs <p> Links <a href=\u201dlink.html\u201d>Link text</a> Images <img src=\u201dassets/images/images.jpg\u201d alt=\u201dimage description\u201d > Tags we covered 1 2 3 4 5 6 < header > < nav > < main > < section > < aside > < footer >","title":"HTML 4: Semantic HTML5"},{"location":"module-2/html-4/#html-4-semantic-html5","text":"","title":"HTML 4: Semantic HTML5"},{"location":"module-2/html-4/#a-basic-page","text":"","title":"A Basic Page"},{"location":"module-2/html-4/#introduction","text":"I will build a basic web page using content elements I will use Brackets And some demo content You should: follow along!","title":"Introduction"},{"location":"module-2/html-4/#semantic-html","text":"We will learn to write Semantic HTML Elements, attributes, and attribute values in HTML are defined to have certain meanings (semantics). For example, the ol element represents an ordered list, and the lang attribute represents the language of the content. (W3C, HTML 5.1 spec) Berners-Lee first discussed the concept in 2001. Essentially they provide meaning to the content on a HTML page, rather than just focusing on presentation. Before HTML5 the structure/layout of a page was built using the <div> tag The <div> tag has no semantic value HTML5 brought new elements for semantically defining structure: 1 < header > , < nav > , < main > , < aside > , < footer > You must use some of these tags in your website.","title":"Semantic HTML"},{"location":"module-2/html-4/#semantic-html5-tags","text":"Default HTML5 structure Heading tags <h1>, <h2>, <h3>, <h4>, <h5>, <h6> Paragraphs <p> Links <a href=\u201dlink.html\u201d>Link text</a> Images <img src=\u201dassets/images/images.jpg\u201d alt=\u201dimage description\u201d >","title":"Semantic HTML5 tags"},{"location":"module-2/html-4/#tags-we-covered","text":"1 2 3 4 5 6 < header > < nav > < main > < section > < aside > < footer >","title":"Tags we covered"},{"location":"module-2/html-5/","text":"HTML 5: Navigation Navigation Introduction Navigation on your website Semantic HTML Must be created using the unordered list tag: 1 2 3 4 <ul> <li> List item </li> <li> List item </li> </ul> When I say must, I'm not kidding, if you don't use the <ul> tag then you'll fail the html component Let's get started! Navigation Your navigation might look like: 1 2 3 4 5 <ul> <li><a href= \u201dindex.html\u201d > Home </a></li> <li><a href= \u201dabout.html\u201d > About </a></li> <li><a href= \u201dhistory.html\u201d > History </a></li> </ul> Code is available in GitHub","title":"HTML 5: Navigation"},{"location":"module-2/html-5/#html-5-navigation","text":"","title":"HTML 5: Navigation"},{"location":"module-2/html-5/#navigation","text":"","title":"Navigation"},{"location":"module-2/html-5/#introduction","text":"Navigation on your website","title":"Introduction"},{"location":"module-2/html-5/#semantic-html","text":"Must be created using the unordered list tag: 1 2 3 4 <ul> <li> List item </li> <li> List item </li> </ul> When I say must, I'm not kidding, if you don't use the <ul> tag then you'll fail the html component","title":"Semantic HTML"},{"location":"module-2/html-5/#lets-get-started","text":"","title":"Let's get started!"},{"location":"module-2/html-5/#navigation_1","text":"Your navigation might look like: 1 2 3 4 5 <ul> <li><a href= \u201dindex.html\u201d > Home </a></li> <li><a href= \u201dabout.html\u201d > About </a></li> <li><a href= \u201dhistory.html\u201d > History </a></li> </ul> Code is available in GitHub","title":"Navigation"},{"location":"module-2/html-6/","text":"HTML 6: Validation Introduction We\u2019ll look at validation What it is Why it is important How can you do it Validate your code Validation is extremely important! It will check your code for errors You can then fix these issues (hopefully) If you can\u2019t resolve the error, then ask us! Validator W3C Validator: http://validator.w3.org Many code editors will have a validation plugin Here's one for Brackets: Nu Markup Checker To install, click the little brick icon on the right hand side, then type 'nu markup' and hit 'install'","title":"HTML 6: Validation"},{"location":"module-2/html-6/#html-6-validation","text":"","title":"HTML 6: Validation"},{"location":"module-2/html-6/#introduction","text":"We\u2019ll look at validation What it is Why it is important How can you do it","title":"Introduction"},{"location":"module-2/html-6/#validate-your-code","text":"Validation is extremely important! It will check your code for errors You can then fix these issues (hopefully) If you can\u2019t resolve the error, then ask us!","title":"Validate your code"},{"location":"module-2/html-6/#validator","text":"W3C Validator: http://validator.w3.org Many code editors will have a validation plugin Here's one for Brackets: Nu Markup Checker To install, click the little brick icon on the right hand side, then type 'nu markup' and hit 'install'","title":"Validator"},{"location":"module-2/slides/","text":"HTML Slides HTML Web Introduction Site Setup Coding Software Coding Introduction Basic Page Semantic HTML Navigation Validation","title":"HTML Slides"},{"location":"module-2/slides/#html-slides","text":"","title":"HTML Slides"},{"location":"module-2/slides/#html","text":"Web Introduction Site Setup Coding Software Coding Introduction Basic Page Semantic HTML Navigation Validation","title":"HTML"},{"location":"module-3/","text":"Module 3: CSS Workshops are not recorded. This module Now that you understand HTML, we'll move onto looking at CSS: the presentation layer. You will learn how to: write concise and efficient CSS how to attach the stylesheet to your pages how to achieve the stylistic aims of your site Module Content CSS CSS Fundamentals Box model and positioning Typography Styling navigation Links and images Wrappers Bringing it all together Slides The information on the pages above is also available as slides (generally used for presentation in class) here . Additional Resources One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Module 3: CSS"},{"location":"module-3/#module-3-css","text":"Workshops are not recorded.","title":"Module 3: CSS"},{"location":"module-3/#this-module","text":"Now that you understand HTML, we'll move onto looking at CSS: the presentation layer. You will learn how to: write concise and efficient CSS how to attach the stylesheet to your pages how to achieve the stylistic aims of your site","title":"This module"},{"location":"module-3/#module-content","text":"","title":"Module Content"},{"location":"module-3/#css","text":"CSS Fundamentals Box model and positioning Typography Styling navigation Links and images Wrappers Bringing it all together","title":"CSS"},{"location":"module-3/#slides","text":"The information on the pages above is also available as slides (generally used for presentation in class) here .","title":"Slides"},{"location":"module-3/#additional-resources","text":"One of the best things about learning to write HTML and CSS is that there is a huge amount of online resources, some include: HTML5 for web designers Mozilla HTML Reference Mozilla Intro to HTML HTML5 Doctor HTML Reference W3Schools HTML Reference W3Schools Intro to HTML CodeAcademy Intro to HTML & CSS Remember though, do NOT use the <table> tag to layout content . It can only be used for tabular data (e.g. numbers).","title":"Additional Resources"},{"location":"module-3/css-1/","text":"CSS 1: CSS Fundamentals Introduction We will create a CSS file Save it in the correct location Link to it from our HTML page Write some basic styles Key points The link to your stylesheet should look like: 1 < link rel = \"stylesheet\" href = \"assets/css/styles.css\" > The file should be saved in the css folder, which is inside the assets folder All file names and folder names are in lowercase and no spaces Code is available in GitHub CSS reset We will apply a CSS reset to our document But why? Each browser has different default styles built in, but they aren't consistent As Chris Coyier (of CSS Tricks) explains : the whole idea of a CSS reset is to deal with styling inconsistencies across browsers. For example, just now I popped a <button> onto a page with no other styling whatsoever. Chrome applies padding: 2px 6px 3px; - Firefox applies padding: 0 8px; . A CSS reset would apply new padding to that element, so that all browsers are consistent about what they apply. Two main options Eric Meyer\u2019s reset: http://meyerweb.com/eric/tools/css/reset/ Normalize.css: http://necolas.github.io/normalize.css/ CSS fundamentals Introduction Why is it called CSS? Basic syntax Targeting elements Basic properties Why CSS? Stands for: Cascading Style Sheets - Styles cascade from the top to the bottom - Styles added later can override ones from the top Works internally as well - If you include the same property twice, the latter one will be used Syntax Syntax","title":"CSS 1: CSS Fundamentals"},{"location":"module-3/css-1/#css-1-css-fundamentals","text":"","title":"CSS 1: CSS Fundamentals"},{"location":"module-3/css-1/#introduction","text":"We will create a CSS file Save it in the correct location Link to it from our HTML page Write some basic styles","title":"Introduction"},{"location":"module-3/css-1/#key-points","text":"The link to your stylesheet should look like: 1 < link rel = \"stylesheet\" href = \"assets/css/styles.css\" > The file should be saved in the css folder, which is inside the assets folder All file names and folder names are in lowercase and no spaces Code is available in GitHub","title":"Key points"},{"location":"module-3/css-1/#css-reset","text":"We will apply a CSS reset to our document","title":"CSS reset"},{"location":"module-3/css-1/#but-why","text":"Each browser has different default styles built in, but they aren't consistent As Chris Coyier (of CSS Tricks) explains : the whole idea of a CSS reset is to deal with styling inconsistencies across browsers. For example, just now I popped a <button> onto a page with no other styling whatsoever. Chrome applies padding: 2px 6px 3px; - Firefox applies padding: 0 8px; . A CSS reset would apply new padding to that element, so that all browsers are consistent about what they apply.","title":"But why?"},{"location":"module-3/css-1/#two-main-options","text":"Eric Meyer\u2019s reset: http://meyerweb.com/eric/tools/css/reset/ Normalize.css: http://necolas.github.io/normalize.css/","title":"Two main options"},{"location":"module-3/css-1/#css-fundamentals","text":"","title":"CSS fundamentals"},{"location":"module-3/css-1/#introduction_1","text":"Why is it called CSS? Basic syntax Targeting elements Basic properties","title":"Introduction"},{"location":"module-3/css-1/#why-css","text":"Stands for: Cascading Style Sheets - Styles cascade from the top to the bottom - Styles added later can override ones from the top Works internally as well - If you include the same property twice, the latter one will be used","title":"Why CSS?"},{"location":"module-3/css-1/#syntax","text":"","title":"Syntax"},{"location":"module-3/css-1/#syntax_1","text":"","title":"Syntax"},{"location":"module-3/css-2/","text":"CSS 2: Box model and positioning The Box Model Introduction What is the box model? CSS properties that can be styled Key Properties When considering the box model, the key properties are: - display - width - height - margin - padding - border CSS positioning We will look at how to position elements in CSS Key properties We discussed: - float (Only left or right) - padding - margin","title":"CSS 2: Box model and positioning"},{"location":"module-3/css-2/#css-2-box-model-and-positioning","text":"","title":"CSS 2: Box model and positioning"},{"location":"module-3/css-2/#the-box-model","text":"","title":"The Box Model"},{"location":"module-3/css-2/#introduction","text":"What is the box model? CSS properties that can be styled","title":"Introduction"},{"location":"module-3/css-2/#key-properties","text":"When considering the box model, the key properties are: - display - width - height - margin - padding - border","title":"Key Properties"},{"location":"module-3/css-2/#css-positioning","text":"We will look at how to position elements in CSS","title":"CSS positioning"},{"location":"module-3/css-2/#key-properties_1","text":"We discussed: - float (Only left or right) - padding - margin","title":"Key properties"},{"location":"module-3/css-3/","text":"CSS 3: Typography Introduction We will look at how to style text in CSS Key properties We will discuss the following: 1 2 3 4 5 6 7 h2 { font-family : ; font-size : ; font-weight : ; line-height : ; color : ; }","title":"CSS 3: Typography"},{"location":"module-3/css-3/#css-3-typography","text":"","title":"CSS 3: Typography"},{"location":"module-3/css-3/#introduction","text":"We will look at how to style text in CSS","title":"Introduction"},{"location":"module-3/css-3/#key-properties","text":"We will discuss the following: 1 2 3 4 5 6 7 h2 { font-family : ; font-size : ; font-weight : ; line-height : ; color : ; }","title":"Key properties"},{"location":"module-3/css-4/","text":"CSS 4: Styling navigation Introduction How to style the navigation Important to remember: - All navigation must be within a <ul> tag - Only primary navigation should be within the <nav> tag","title":"CSS 4: Styling navigation"},{"location":"module-3/css-4/#css-4-styling-navigation","text":"","title":"CSS 4: Styling navigation"},{"location":"module-3/css-4/#introduction","text":"How to style the navigation Important to remember: - All navigation must be within a <ul> tag - Only primary navigation should be within the <nav> tag","title":"Introduction"},{"location":"module-3/css-5/","text":"CSS 5: Links and images Styling Links Introduction How to make links look a bit more interesting Key properties 1 2 3 4 a {} a : hover {} a : visited {} a : active {} Images","title":"CSS 5: Links and images"},{"location":"module-3/css-5/#css-5-links-and-images","text":"","title":"CSS 5: Links and images"},{"location":"module-3/css-5/#styling-links","text":"","title":"Styling Links"},{"location":"module-3/css-5/#introduction","text":"How to make links look a bit more interesting","title":"Introduction"},{"location":"module-3/css-5/#key-properties","text":"1 2 3 4 a {} a : hover {} a : visited {} a : active {}","title":"Key properties"},{"location":"module-3/css-5/#images","text":"","title":"Images"},{"location":"module-3/css-6/","text":"CSS 6: Wrappers Introduction Wrappers - What are they - How to use them","title":"CSS 6: Wrappers"},{"location":"module-3/css-6/#css-6-wrappers","text":"","title":"CSS 6: Wrappers"},{"location":"module-3/css-6/#introduction","text":"Wrappers - What are they - How to use them","title":"Introduction"},{"location":"module-3/css-7/","text":"CSS 6: Bringing it all together","title":"CSS 6: Bringing it all together"},{"location":"module-3/css-7/#css-6-bringing-it-all-together","text":"","title":"CSS 6: Bringing it all together"},{"location":"module-3/slides/","text":"CSS Slides CSS CSS basics CSS reset CSS fundamentals Box Model Positioning Typography Navigation Links Images Wrappers Final Site","title":"CSS Slides"},{"location":"module-3/slides/#css-slides","text":"","title":"CSS Slides"},{"location":"module-3/slides/#css","text":"CSS basics CSS reset CSS fundamentals Box Model Positioning Typography Navigation Links Images Wrappers Final Site","title":"CSS"},{"location":"module-4/","text":"Module 4: Responsive CSS Workshops are not recorded. This module The content in this module will allow you to expand your understanding of CSS by introducing the concept of responsive CSS. You will learn: * Where the concept emerged from * How to write CSS media queries * How to define appropriate breakpoints * All about relative units, flexible images, grid systems Workshop Content Theories and Concepts The code Additional Resources A Book Apart: Responsive Web Design, Ethan Marcotte, 2011 A Book Apart: Mobile First, Luke Wroblewski, 2011 Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine: Specificity in CSS","title":"Module 4: Responsive CSS"},{"location":"module-4/#module-4-responsive-css","text":"Workshops are not recorded.","title":"Module 4: Responsive CSS"},{"location":"module-4/#this-module","text":"The content in this module will allow you to expand your understanding of CSS by introducing the concept of responsive CSS. You will learn: * Where the concept emerged from * How to write CSS media queries * How to define appropriate breakpoints * All about relative units, flexible images, grid systems","title":"This module"},{"location":"module-4/#workshop-content","text":"Theories and Concepts The code","title":"Workshop Content"},{"location":"module-4/#additional-resources","text":"A Book Apart: Responsive Web Design, Ethan Marcotte, 2011 A Book Apart: Mobile First, Luke Wroblewski, 2011 Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine: Specificity in CSS","title":"Additional Resources"},{"location":"module-4/responsive-1/","text":"Responsive 1: Theories and Concepts Introduction This page will provide some context about where responsive web design emerged from before looking at the key theories and concepts in a bit more detail. Describe syntax of media queries Discuss how to design for multiple devices Discuss Frameworks: CSS grids Bootstrap etc Additional readings and resources will be posted here and on Canvas. Readings Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine\u2019s breakdown A deeper look into Semantic Mark-up This handy site The context Where does responsive web design emerge from? Bandaid #1: The mobile site How many times have you seen this? http://mobile.website.com... This was the bandaid of choice 5 years ago, with hundreds of thousands of companies being sold a mobile-specific version of their site. * Delivers different content * Delivers mobile content to desktop users * Doesn\u2019t cater for new tech * Automates nasty redirects * Often hard to find original site Bandaid #2: The classic trio Trying to cater to a set range of specific device types & sizes: Mobile / Tablet / Desktop Bandaid #3: The App Even now, companies are being sold mobile apps as a solution to their responsive woes. An App is a tool that makes use of native device features such as location based services, notifications, or * sensors such as camera, microphone and accelerometer. An app is not the answer to viewing websites on your mobile device. The solution There is no way to cater for every possible screen size, unless we build designs that can respond to whatever device they\u2019re used with. Smart TVs? Game Consoles? Watches? New smart phones? With the huge surge in device styles, sizes and types, we cannot design for everything. What new inventions are coming in the next 5 years? Make it flexible! Responsive Web design is the approach that suggests that design and development should: respond to the user\u2019s behaviour and environment based on screen size, platform and orientation Uses a mix of flexible grids and layouts, images and CSS media queries. Theories and concepts Mobile first design The first mention of mobile-specific design was by Luke Wroblewski in late 2009. In a short blog post he stated: So when a team designs mobile first, the end result is an experience focused on the key tasks users want to accomplish without the extraneous detours and general interface debris that litter today's desktop-accessed Web sites. That's good user experience and good for business. Mobile First by Luke Wroblewski (2009). You've probably seen this around, primarily the argument is that most users interact with a site through their nobile, so when you are designing a site from scratch, you should start with the mobile version and then scale up. Responsive Web Design The term 'Responsive Web Design' was coined by Ethan Marcotte in May 2010. Expanding on Wrobkewski's idea of mobile first deisgn, he writes that: Working on the web, however, is a wholly different matter. Our work is defined by its transience, often refined or replaced within a year or two. Inconsistent window widths, screen resolutions, user preferences, and our users\u2019 installed fonts are but a few of the intangibles we negotiate when we publish our work, and over the years, we\u2019ve become incredibly adept at doing so. But the landscape is shifting, perhaps more quickly than we might like. Mobile browsing is expected to outpace desktop-based access within three to five years. Two of the three dominant video game consoles have web browsers (and one of them is quite excellent). We\u2019re designing for mice and keyboards, for T9 keypads, for handheld game controllers, for touch interfaces. In short, we\u2019re faced with a greater number of devices, input modes, and browsers than ever before. And later: Rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience. You should read the rest of the post on A List Apart . Essentially, the argument is that a Web site should respond to the needs of the user, regardless of the device they are using to access it. It seems obvious now, but it wasn't always this way. For more context, read the Wikipedia page entry: Responve Web Design which provides a wealth of additional resources. Other theories and concepts As you might have started to realise, when it comes to web design and development, there are a lot of different theories and concepts that emerge and then disappear as new ones increase in popularity. Other concepts you might see include: Graceful degradation The idea here is that a designer would create a web page using the latest tools and technology available to them, but the site would still remain usable/presentable even if the user didn't have those tools or technology installed. You might have seen this with old Flash-based video sites, you could still access the website, but you'd get a notice advising you to install the latest version of Flash player so that you could use the site in the way the designer anticipated. Progressive enhancement This concept dates back to 2003. The W3C explains it as: You start by establishing a basic level of user experience that all browsers will be able to provide when rendering your web site, but you also build in more advanced functionality that will automatically be available to browsers that can use it. There is a great comparison of the two from the W3C here: Graceful degradation versus progressive enhancement Flexible design This concept predates responsive web design, but could certinaly be considered as an early push in the right direction. It was first published in a book by Zoe Gillenwater, (2008), availabe in the UC library and online . The aim here is to consider how to build CSS layouts which respond to different screen sizes - on a desktop computer. It was targeted at designers who has always worked with print-based grid layouts and needed to reconsider how they could be used online. \u2018Journey driven design' A new theory to combat the popularity of mobile-first design . The argument here is that, yes, a lot of people do interact with the site on mobile - but they supplment their browsing with both desktop and tablet devices. So, in turn, we should think about the entire journey a user undertakes. Read more from Smashing Magazine here . The future... Does responsive website design end when you make a website that fluidly adapts it layout to different browser sizes? What about delivering the right content? Should a mobile device on data receive the same images as a desktop on broadband? What about changing the context? Do websites just resize all the way down for watches, and up for giant screens? Do they actually begin adapting to the context they're accessed in? New technology and devices? We can\u2019t begin to imagine what the next big tech is going to be. But we already know there are a few new ones that no one seems to know what to do with: smart homes, wearable tech, virtual reality. All of these utilise web technology as the underlying means of access - despite what they look like. We need to know how we can design for these varied interfaces. That's where the real power of responsive web design emerged. What does all this mean though? As you would have discovered in the Marcotte article, you'll write media queries in your css that allow you to target different device sizes. Where to start? Before we move onto the code, let us consider a few extra important things. The content No amount of design or code can adequately fix content problems. Separate content and hierarchy from any single layout possibility, and work out what components & content your site needs. The importance of semantic HTML Remember how we talked about the value of semantic markup in the first 2 assignments? Semantic markup is HTML that clearly defines the content <article> <form> <table> <section> <figure> <video> Non-semantic mark-up tells us nothing about the content <div> <span> Semantic markup is extremely portable, and ensures websites are ready to adapt to new contexts. It is crucial that you use semantic markup when creating your websites. The Design Where should you start? * Use visual designs (pen/paper, Photoshop or similar) for quick layout exploration and asset creation * It\u2019s impossible to accurately assess a responsive layout in .JPG form * a single Photoshop composition will only express a sliver of the layout potential a fully-flexible responsive site has... Don't waste your time in Photoshop I'm a strong believer of using the sketching in code methodology. This approach encourages rapid prototyping, directly with code. Read David Verba's Sketching in Code: the Magic of Prototyping article from 2008 or Jared M. Spool's reflection here . Mockups & wireframes What a .PSD file can\u2019t easily show in terms of layout, you can communicate on a scrap of paper using a pencil Wireframes can be as simple or as complex as you need them to be Use Photoshop to establish the \u201clook & feel\u201d of a digital design; use wireframes to map out how they work, interact and respond to different conditions There are thousands of tools out there; it doesn\u2019t matter what you use.","title":"Responsive 1: Theories and Concepts"},{"location":"module-4/responsive-1/#responsive-1-theories-and-concepts","text":"","title":"Responsive 1: Theories and Concepts"},{"location":"module-4/responsive-1/#introduction","text":"This page will provide some context about where responsive web design emerged from before looking at the key theories and concepts in a bit more detail. Describe syntax of media queries Discuss how to design for multiple devices Discuss Frameworks: CSS grids Bootstrap etc Additional readings and resources will be posted here and on Canvas.","title":"Introduction"},{"location":"module-4/responsive-1/#readings","text":"Ethan Marcotte\u2019s Responsive web design (the short version) Smashing Magazine\u2019s breakdown A deeper look into Semantic Mark-up This handy site","title":"Readings"},{"location":"module-4/responsive-1/#the-context","text":"Where does responsive web design emerge from?","title":"The context"},{"location":"module-4/responsive-1/#bandaid-1-the-mobile-site","text":"How many times have you seen this? http://mobile.website.com... This was the bandaid of choice 5 years ago, with hundreds of thousands of companies being sold a mobile-specific version of their site. * Delivers different content * Delivers mobile content to desktop users * Doesn\u2019t cater for new tech * Automates nasty redirects * Often hard to find original site","title":"Bandaid #1: The mobile site"},{"location":"module-4/responsive-1/#bandaid-2-the-classic-trio","text":"Trying to cater to a set range of specific device types & sizes: Mobile / Tablet / Desktop","title":"Bandaid #2: The classic trio"},{"location":"module-4/responsive-1/#bandaid-3-the-app","text":"Even now, companies are being sold mobile apps as a solution to their responsive woes. An App is a tool that makes use of native device features such as location based services, notifications, or * sensors such as camera, microphone and accelerometer. An app is not the answer to viewing websites on your mobile device.","title":"Bandaid #3: The App"},{"location":"module-4/responsive-1/#the-solution","text":"There is no way to cater for every possible screen size, unless we build designs that can respond to whatever device they\u2019re used with. Smart TVs? Game Consoles? Watches? New smart phones? With the huge surge in device styles, sizes and types, we cannot design for everything. What new inventions are coming in the next 5 years?","title":"The solution"},{"location":"module-4/responsive-1/#make-it-flexible","text":"Responsive Web design is the approach that suggests that design and development should: respond to the user\u2019s behaviour and environment based on screen size, platform and orientation Uses a mix of flexible grids and layouts, images and CSS media queries.","title":"Make it flexible!"},{"location":"module-4/responsive-1/#theories-and-concepts","text":"","title":"Theories and concepts"},{"location":"module-4/responsive-1/#mobile-first-design","text":"The first mention of mobile-specific design was by Luke Wroblewski in late 2009. In a short blog post he stated: So when a team designs mobile first, the end result is an experience focused on the key tasks users want to accomplish without the extraneous detours and general interface debris that litter today's desktop-accessed Web sites. That's good user experience and good for business. Mobile First by Luke Wroblewski (2009). You've probably seen this around, primarily the argument is that most users interact with a site through their nobile, so when you are designing a site from scratch, you should start with the mobile version and then scale up.","title":"Mobile first design"},{"location":"module-4/responsive-1/#responsive-web-design","text":"The term 'Responsive Web Design' was coined by Ethan Marcotte in May 2010. Expanding on Wrobkewski's idea of mobile first deisgn, he writes that: Working on the web, however, is a wholly different matter. Our work is defined by its transience, often refined or replaced within a year or two. Inconsistent window widths, screen resolutions, user preferences, and our users\u2019 installed fonts are but a few of the intangibles we negotiate when we publish our work, and over the years, we\u2019ve become incredibly adept at doing so. But the landscape is shifting, perhaps more quickly than we might like. Mobile browsing is expected to outpace desktop-based access within three to five years. Two of the three dominant video game consoles have web browsers (and one of them is quite excellent). We\u2019re designing for mice and keyboards, for T9 keypads, for handheld game controllers, for touch interfaces. In short, we\u2019re faced with a greater number of devices, input modes, and browsers than ever before. And later: Rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience. You should read the rest of the post on A List Apart . Essentially, the argument is that a Web site should respond to the needs of the user, regardless of the device they are using to access it. It seems obvious now, but it wasn't always this way. For more context, read the Wikipedia page entry: Responve Web Design which provides a wealth of additional resources.","title":"Responsive Web Design"},{"location":"module-4/responsive-1/#other-theories-and-concepts","text":"As you might have started to realise, when it comes to web design and development, there are a lot of different theories and concepts that emerge and then disappear as new ones increase in popularity. Other concepts you might see include:","title":"Other theories and concepts"},{"location":"module-4/responsive-1/#graceful-degradation","text":"The idea here is that a designer would create a web page using the latest tools and technology available to them, but the site would still remain usable/presentable even if the user didn't have those tools or technology installed. You might have seen this with old Flash-based video sites, you could still access the website, but you'd get a notice advising you to install the latest version of Flash player so that you could use the site in the way the designer anticipated.","title":"Graceful degradation"},{"location":"module-4/responsive-1/#progressive-enhancement","text":"This concept dates back to 2003. The W3C explains it as: You start by establishing a basic level of user experience that all browsers will be able to provide when rendering your web site, but you also build in more advanced functionality that will automatically be available to browsers that can use it. There is a great comparison of the two from the W3C here: Graceful degradation versus progressive enhancement","title":"Progressive enhancement"},{"location":"module-4/responsive-1/#flexible-design","text":"This concept predates responsive web design, but could certinaly be considered as an early push in the right direction. It was first published in a book by Zoe Gillenwater, (2008), availabe in the UC library and online . The aim here is to consider how to build CSS layouts which respond to different screen sizes - on a desktop computer. It was targeted at designers who has always worked with print-based grid layouts and needed to reconsider how they could be used online.","title":"Flexible design"},{"location":"module-4/responsive-1/#journey-driven-design","text":"A new theory to combat the popularity of mobile-first design . The argument here is that, yes, a lot of people do interact with the site on mobile - but they supplment their browsing with both desktop and tablet devices. So, in turn, we should think about the entire journey a user undertakes. Read more from Smashing Magazine here .","title":"\u2018Journey driven design'"},{"location":"module-4/responsive-1/#the-future","text":"Does responsive website design end when you make a website that fluidly adapts it layout to different browser sizes? What about delivering the right content? Should a mobile device on data receive the same images as a desktop on broadband? What about changing the context? Do websites just resize all the way down for watches, and up for giant screens? Do they actually begin adapting to the context they're accessed in? New technology and devices? We can\u2019t begin to imagine what the next big tech is going to be. But we already know there are a few new ones that no one seems to know what to do with: smart homes, wearable tech, virtual reality. All of these utilise web technology as the underlying means of access - despite what they look like. We need to know how we can design for these varied interfaces. That's where the real power of responsive web design emerged.","title":"The future..."},{"location":"module-4/responsive-1/#what-does-all-this-mean-though","text":"As you would have discovered in the Marcotte article, you'll write media queries in your css that allow you to target different device sizes.","title":"What does all this mean though?"},{"location":"module-4/responsive-1/#where-to-start","text":"Before we move onto the code, let us consider a few extra important things.","title":"Where to start?"},{"location":"module-4/responsive-1/#the-content","text":"No amount of design or code can adequately fix content problems. Separate content and hierarchy from any single layout possibility, and work out what components & content your site needs.","title":"The content"},{"location":"module-4/responsive-1/#the-importance-of-semantic-html","text":"Remember how we talked about the value of semantic markup in the first 2 assignments? Semantic markup is HTML that clearly defines the content <article> <form> <table> <section> <figure> <video> Non-semantic mark-up tells us nothing about the content <div> <span> Semantic markup is extremely portable, and ensures websites are ready to adapt to new contexts. It is crucial that you use semantic markup when creating your websites.","title":"The importance of semantic HTML"},{"location":"module-4/responsive-1/#the-design","text":"Where should you start? * Use visual designs (pen/paper, Photoshop or similar) for quick layout exploration and asset creation * It\u2019s impossible to accurately assess a responsive layout in .JPG form * a single Photoshop composition will only express a sliver of the layout potential a fully-flexible responsive site has... Don't waste your time in Photoshop I'm a strong believer of using the sketching in code methodology. This approach encourages rapid prototyping, directly with code. Read David Verba's Sketching in Code: the Magic of Prototyping article from 2008 or Jared M. Spool's reflection here .","title":"The Design"},{"location":"module-4/responsive-1/#mockups-wireframes","text":"What a .PSD file can\u2019t easily show in terms of layout, you can communicate on a scrap of paper using a pencil Wireframes can be as simple or as complex as you need them to be Use Photoshop to establish the \u201clook & feel\u201d of a digital design; use wireframes to map out how they work, interact and respond to different conditions There are thousands of tools out there; it doesn\u2019t matter what you use.","title":"Mockups &amp; wireframes"},{"location":"module-4/responsive-2/","text":"Responsive 2: The Code Media queries allow you to break off specific styles for specific browser types and sizes. Meet Media Queries Media Queries allow us to build on a flexible framework, and customise styles for different screen types and sizes. 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ). Core ingredients So what does it take to create a responsive design? Speaking purely in terms of front-end layout, it takes three core ingredients: Flexible grids & measurements Flexible images & media Media queries Use flexible everything Start with a flexible grid Use relative units ( rem , em , etc) Make your images flexible Make your code simple & robust Mobile first? Consider mobile first. That doesn\u2019t mean you need to code that way. You may choose to begin with wide views in order to get a handle on a more complex layout It can be easier to ensure columns and spacing are working on the wider views before working down to a single column Either way, ensure you considered responsive optimisation when you planned your content; screen sizes, connection speeds, device capabilities, fat fingers vs mouse pointers, hover states etc will all affect your coding. Let's get into it Relative units & Flexible Typesetting Em Rem Vw , vh & vmin Em 1em = 16px in most browsers You can set the document Root to 16px using CSS resets or by styling the body To convert your design\u2019s font-size to em , divide the desired target font-size (e.g. 24px ) by the container font-size (e.g. 16px ). 1 2 3 target \u00f7 context = result 24 \u00f7 16 = 1 . 5 font-size : 1 . 5em ; Em\u2019s are inherited Whenever you set an em-based font-size on any container, you now need to calculate any nested font sizes based on that new font-size ! Let\u2019s imagine a new target font-size of 11px : 1 2 11 \u00f7 24 = 0 . 45833333333333 em font - size : 0 . 45833333333333 em Don\u2019t round that number if you\u2019re trying to stay true to a design! 0.46em might be neater, but proportionately it wont match. Rem A relative unit, like em But it is always relative to the \"root\" element rather than using the inherited cascade like em does This vastly simplifies working with relative units! One great technique: Px at the Root, Rem for Components, Em for Text Elements Vw, vh & vmin CSS3 has some new values for sizing things relative to the current viewport size. 1vw = 1% of viewport width 1vh = 1% of viewport height 1vmin = 1vw or 1vh , whichever is smaller 1vmax = 1vw or 1vh , whichever is larger If the viewport is 40cm wide, 1vw = 0.4cm Flexible Grids How to get started with flexible grids? We can re-use the same formula that let us calculate ems! From pixels to percentages target \u00f7 context = result 700 \u00f7 1000 = 0.7 = 70% 290 \u00f7 1000 = 0.3 = 29% 200 \u00f7 700 = 0.285 = 28.5% Media queries As above (so you don't forget): 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ). Extra reading Read more about Media Queries ! Media Queries are the kings of Responsive Web Design. Specific ways to write fancy logic-based media queries based on different browser types, sizes, etc. Media Queries & Breakpoints We used to add media queries for the most popular mobile pixel dimensions. The explosion of new tablets, smartphones & touch devices means that we don\u2019t have a preset list of dimensions anymore! It\u2019s become standard to let media queried breakpoints be defined by content/layout rather than any specific device Whenever things don\u2019t fit or hierarchy breaks, add a media query I use min or max-width most often: this is a good way to keep your queries simple You can read about why basing your media queries on specific device sizes is doomed to failure . Extra reading Defining breakpoints CSS Tricks: Specificity Grid Systems & Frameworks Can you use Bootstrap? (Or similar) If you feel that you\u2019re an advanced enough coder to properly utilise pre-built frameworks, I\u2019m happy for you to use them. However we will specifically be looking out for tell-tale signs that you let the framework \u201ccarry\u201d your design! Avoid counting on your framework to design your website. Don\u2019t let it determine your layout. CSS Grid Layout You can use CSS grids to create complex responsive layouts whilst still ensuring the underlying page structure remains structured. Support was first added to Chrome, Firefox and Safari in March 2017. Grid Layout lets us properly separate the order of elements in the source from their visual presentation. As a designer this means you are free to change the location of page elements as is best for your layout at different breakpoints and not need to compromise a sensible structured document for your responsive design. CSS Tricks has a great guide to CSS Grid Layout Realizing common layouts using CSS Grid Layout from Mozilla MDN Flex-box The Flexbox Layout (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word \"flex\"). Read the CSS Tricks Complete Guide to Flexbox for a very detailed introduction. Grid or Flexbox You'll find lots of information online about this topic, but worth reading this great summary: Flexbox is for one-dimensional layouts - anything that needs to be laid out in a straight line (or in a broken line, which would be a single straight line if they were joined back together). Grid is for two-dimensional layouts. It can be used as a low-powered flexbox substitute (we're trying to make sure that a single-column/row grid acts very similar to a flexbox), but that's not using its full power. Flexbox is appropriate for many layouts, and a lot of \"page component\" elements, as most of them are fundamentally linear. Grid is appropriate for overall page layout, and for complicated page components which aren't linear in their design. The two can be composed arbitrarily, so once they're both widely supported, I believe most pages will be composed of an outer grid for the overall layout, a mix of nested flexboxes and grid for the components of the page, and finally block/inline/table layout at the \"leaves\" of the page, where the text and content live. CSS-grid-layout - Relationship with Flexbox Flexible images An image with a specific size can be the bane of your existence when you\u2019re trying to build a responsive website. While there are many different advanced solutions, there is usually one very basic fix: 1 2 3 4 img { max-width : 100 % ; height : auto ; } This forces any image to adjust to the container width. Readings Trent Walton\u2019s blog (anything!): Fit to scale ; Fluid type ; Flexible foundations Examples of great responsive designs A minimal, free, wire framing tool CSS Tricks on relative units of measurement & how to use them","title":"Responsive 2: The Code"},{"location":"module-4/responsive-2/#responsive-2-the-code","text":"Media queries allow you to break off specific styles for specific browser types and sizes.","title":"Responsive 2: The Code"},{"location":"module-4/responsive-2/#meet-media-queries","text":"Media Queries allow us to build on a flexible framework, and customise styles for different screen types and sizes. 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ).","title":"Meet Media Queries"},{"location":"module-4/responsive-2/#core-ingredients","text":"So what does it take to create a responsive design? Speaking purely in terms of front-end layout, it takes three core ingredients: Flexible grids & measurements Flexible images & media Media queries","title":"Core ingredients"},{"location":"module-4/responsive-2/#use-flexible-everything","text":"Start with a flexible grid Use relative units ( rem , em , etc) Make your images flexible Make your code simple & robust","title":"Use flexible everything"},{"location":"module-4/responsive-2/#mobile-first","text":"Consider mobile first. That doesn\u2019t mean you need to code that way. You may choose to begin with wide views in order to get a handle on a more complex layout It can be easier to ensure columns and spacing are working on the wider views before working down to a single column Either way, ensure you considered responsive optimisation when you planned your content; screen sizes, connection speeds, device capabilities, fat fingers vs mouse pointers, hover states etc will all affect your coding.","title":"Mobile first?"},{"location":"module-4/responsive-2/#lets-get-into-it","text":"","title":"Let's get into it"},{"location":"module-4/responsive-2/#relative-units-flexible-typesetting","text":"Em Rem Vw , vh & vmin","title":"Relative units &amp; Flexible Typesetting"},{"location":"module-4/responsive-2/#em","text":"1em = 16px in most browsers You can set the document Root to 16px using CSS resets or by styling the body To convert your design\u2019s font-size to em , divide the desired target font-size (e.g. 24px ) by the container font-size (e.g. 16px ). 1 2 3 target \u00f7 context = result 24 \u00f7 16 = 1 . 5 font-size : 1 . 5em ;","title":"Em"},{"location":"module-4/responsive-2/#ems-are-inherited","text":"Whenever you set an em-based font-size on any container, you now need to calculate any nested font sizes based on that new font-size ! Let\u2019s imagine a new target font-size of 11px : 1 2 11 \u00f7 24 = 0 . 45833333333333 em font - size : 0 . 45833333333333 em Don\u2019t round that number if you\u2019re trying to stay true to a design! 0.46em might be neater, but proportionately it wont match.","title":"Em\u2019s are inherited"},{"location":"module-4/responsive-2/#rem","text":"A relative unit, like em But it is always relative to the \"root\" element rather than using the inherited cascade like em does This vastly simplifies working with relative units! One great technique: Px at the Root, Rem for Components, Em for Text Elements","title":"Rem"},{"location":"module-4/responsive-2/#vw-vh-vmin","text":"CSS3 has some new values for sizing things relative to the current viewport size. 1vw = 1% of viewport width 1vh = 1% of viewport height 1vmin = 1vw or 1vh , whichever is smaller 1vmax = 1vw or 1vh , whichever is larger If the viewport is 40cm wide, 1vw = 0.4cm","title":"Vw, vh &amp; vmin"},{"location":"module-4/responsive-2/#flexible-grids","text":"How to get started with flexible grids? We can re-use the same formula that let us calculate ems! From pixels to percentages target \u00f7 context = result 700 \u00f7 1000 = 0.7 = 70% 290 \u00f7 1000 = 0.3 = 29% 200 \u00f7 700 = 0.285 = 28.5%","title":"Flexible Grids"},{"location":"module-4/responsive-2/#media-queries","text":"As above (so you don't forget): 1 2 3 4 5 @media screen and ( max - device - width : 480 px ) { . column { float : none ; } } The query contains two components: A. a media type ( screen ), and B. the actual query enclosed within parentheses, containing a particular media feature ( max-device-width ) to inspect, followed by the target value ( 480px ).","title":"Media queries"},{"location":"module-4/responsive-2/#extra-reading","text":"Read more about Media Queries ! Media Queries are the kings of Responsive Web Design. Specific ways to write fancy logic-based media queries based on different browser types, sizes, etc.","title":"Extra reading"},{"location":"module-4/responsive-2/#media-queries-breakpoints","text":"We used to add media queries for the most popular mobile pixel dimensions. The explosion of new tablets, smartphones & touch devices means that we don\u2019t have a preset list of dimensions anymore! It\u2019s become standard to let media queried breakpoints be defined by content/layout rather than any specific device Whenever things don\u2019t fit or hierarchy breaks, add a media query I use min or max-width most often: this is a good way to keep your queries simple You can read about why basing your media queries on specific device sizes is doomed to failure .","title":"Media Queries &amp; Breakpoints"},{"location":"module-4/responsive-2/#extra-reading_1","text":"Defining breakpoints CSS Tricks: Specificity","title":"Extra reading"},{"location":"module-4/responsive-2/#grid-systems-frameworks","text":"Can you use Bootstrap? (Or similar) If you feel that you\u2019re an advanced enough coder to properly utilise pre-built frameworks, I\u2019m happy for you to use them. However we will specifically be looking out for tell-tale signs that you let the framework \u201ccarry\u201d your design! Avoid counting on your framework to design your website. Don\u2019t let it determine your layout.","title":"Grid Systems &amp; Frameworks"},{"location":"module-4/responsive-2/#css-grid-layout","text":"You can use CSS grids to create complex responsive layouts whilst still ensuring the underlying page structure remains structured. Support was first added to Chrome, Firefox and Safari in March 2017. Grid Layout lets us properly separate the order of elements in the source from their visual presentation. As a designer this means you are free to change the location of page elements as is best for your layout at different breakpoints and not need to compromise a sensible structured document for your responsive design. CSS Tricks has a great guide to CSS Grid Layout Realizing common layouts using CSS Grid Layout from Mozilla MDN","title":"CSS Grid Layout"},{"location":"module-4/responsive-2/#flex-box","text":"The Flexbox Layout (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word \"flex\"). Read the CSS Tricks Complete Guide to Flexbox for a very detailed introduction.","title":"Flex-box"},{"location":"module-4/responsive-2/#grid-or-flexbox","text":"You'll find lots of information online about this topic, but worth reading this great summary: Flexbox is for one-dimensional layouts - anything that needs to be laid out in a straight line (or in a broken line, which would be a single straight line if they were joined back together). Grid is for two-dimensional layouts. It can be used as a low-powered flexbox substitute (we're trying to make sure that a single-column/row grid acts very similar to a flexbox), but that's not using its full power. Flexbox is appropriate for many layouts, and a lot of \"page component\" elements, as most of them are fundamentally linear. Grid is appropriate for overall page layout, and for complicated page components which aren't linear in their design. The two can be composed arbitrarily, so once they're both widely supported, I believe most pages will be composed of an outer grid for the overall layout, a mix of nested flexboxes and grid for the components of the page, and finally block/inline/table layout at the \"leaves\" of the page, where the text and content live. CSS-grid-layout - Relationship with Flexbox","title":"Grid or Flexbox"},{"location":"module-4/responsive-2/#flexible-images","text":"An image with a specific size can be the bane of your existence when you\u2019re trying to build a responsive website. While there are many different advanced solutions, there is usually one very basic fix: 1 2 3 4 img { max-width : 100 % ; height : auto ; } This forces any image to adjust to the container width.","title":"Flexible images"},{"location":"module-4/responsive-2/#readings","text":"Trent Walton\u2019s blog (anything!): Fit to scale ; Fluid type ; Flexible foundations Examples of great responsive designs A minimal, free, wire framing tool CSS Tricks on relative units of measurement & how to use them","title":"Readings"},{"location":"module-4/slides/","text":"Responsive CSS Slides CSS","title":"Responsive CSS Slides"},{"location":"module-4/slides/#responsive-css-slides","text":"","title":"Responsive CSS Slides"},{"location":"module-4/slides/#css","text":"","title":"CSS"}]}